#+TITLE: Virtual Lisp Machine
#+AUTHOR: lambdart
#+EMAIL: lambdart@protonmail.com
#+DESCRIPTION: an org-mode based Emacs configuration
#+KEYWORDS: emacs, org, liretate programming, config, init.el
#+LANGUAGE: en
#+BABEL: :cache yes
#+PROPERTY: header-args :tangle yes
#+STARTUP: showall

* VLM

  Some people (including me) have started to refer to
  =Emacs= as a =LISP MACHINE=. It is not strictly a lisp machine
  because, clearly, it is a software program and not a physical
  computer, but as that line starts to blur it seems like a useful
  epithet for =Emacs=, because these days it looks more and more like
  an operating system.

  A =Lisp Machine= is a generic term. A Lisp Machine is a
  computer whose operating system and applications are
  written in Lisp.

  So, =VLM= stands for =Virtual Lisp Machine= and the prefix
  =vlm-= will appear often through this document.

  Literate programming is a programming paradigm introduced by Donald
  Knuth  in which a computer program is given an explanation of its
  logic in a natural language, such as English, interspersed with
  snippets of macros and traditional source code, from which
  compatible source code can be generated.

  =Org-mode= is used to write and organize the configuration
  in a literate programming format, meaning it contains
  Elisp source code blocks - that will be tangled generating the
  =init.el= final script - and the referent documentation.

  When you start Emacs, it normally attempts to load
  your =init.el file=, that will =load*= and =set= the
  proper values to the customizable library's variables.

** Bootstrap
*** Header

    Define the package header to avoid warnings, and just a
    reminder this file will be used as a seed to generate the
    final ~init.el~ script.

    #+BEGIN_SRC emacs-lisp

    ;;; init.el --- Virtual Lisp Machine Configuration (init.el)

    ;;; Commentary:

    ;; ... Present day, present time ....

    ;;; Code:

    #+END_SRC

*** Lexical

    Lexical binding opens up many more opportunities
    for optimization, so programs using it are likely to run
    faster in future Emacs versions.

    Lexical binding is also more compatible with concurrency,
    which was added to Emacs in version 26.1.

    #+BEGIN_SRC emacs-lisp

    ;;; -*- lexical-binding: t -*-

    #+END_SRC

*** Verify
**** Version

     Verify Emacs version.

     #+BEGIN_SRC emacs-lisp

     (when (version< emacs-version "26.3")
       (error "This requires Emacs 26.3 and above!"))

     #+END_SRC

*** Loaddefs

    Loaddefs.el, automatically extracted autoloads!

    Just load the definitions using the =autoloads= facility
    (=loaddefs.el=), speeding up the process of initialization,
    that's why most of the =(require '<library>)= are commented
    through this configuration.

    The =autoload= facility lets you register the existence of a function or
    macro, but put off loading the file that defines it. The first call to
    the function automatically loads the proper library, in order to install
    the real definition and other associated code, then runs the real
    definition as if it had been loaded all along (lazy-load).

    Instead of installing a function by loading the file that contains it,
    or by evaluating the function definition, you can make the function
    available but not actually install it until it is first called.  This is
    called =autoloading=.

    When you execute an autoloaded function, Emacs automatically
    evaluates the file that contains the definition, and then calls the
    function.

***** Require

      #+BEGIN_SRC emacs-lisp

      (require 'loaddefs)
      (require 'dists-loaddefs)
      (require 'local-loaddefs)

      #+END_SRC

*** GC

    A big contributor to startup times is garbage collection. We up the gc
    threshold to temporarily prevent it from running, then reset it later by
    enabling `gcmh-mode'. Not resetting it will cause stuttering/freezes.

    Enforce a sneaky Garbage Collection strategy
    to minimize GC interference with the activity.

**** Customize

     #+BEGIN_SRC emacs-lisp

     ;; threshold inital value
     (setq gc-cons-threshold most-positive-fixnum) ; 2^61 bytes

     #+END_SRC

*** Defines

    Your definitions as declare here. We have some
    =aliases=, =variables=, =keymaps= and =binds=.

**** Aliases

     Define some aliases to improve quality of life.

     #+BEGIN_SRC emacs-lisp

     ;; yes or no
     (defalias 'yes-or-no-p 'y-or-n-p)

     #+END_SRC

**** Variables

     Save =file-name-handle-alist=, it will be used to restore
     its original value.

     #+BEGIN_SRC emacs-lisp

     (defvar saved-file-name-handler-alist
       file-name-handler-alist
       "Save `file-name-handler-alist' variable.")

     #+END_SRC

**** Keymaps

     Basically, new prefix maps are created for the most commonly used
     commands and their functions are mapped within their respective maps.

     After that, the prefix maps will be placed in the Ctl-x-map
     prefix, resulting in the standardization of commands (functions)
     access sequences - keybinds or chords.

     For the sake of sanity a lot of keybinds have been cleaned up,
     it's preferable (IMO) to have a small set of keybinds,
     consisting only of the most used ones, providing a more stable
     and less error prone overall usability.

     #+BEGIN_SRC emacs-lisp

     (defvar vlm-window-map
       (make-sparse-keymap)
       "Window commands keymap.")

     (defvar vlm-rb-map
       (make-sparse-keymap)
       "Register/Bookmarks commands keymap.")

     (defvar vlm-tags-map
       (make-sparse-keymap)
       "Tags (navigation) commands keymap.")

     (defvar vlm-tabs-map
       (make-sparse-keymap)
       "Tabs (navigation) commands keymap.")

     (defvar vlm-pm-map
       (make-sparse-keymap)
       "Project management commands keymap.")

     (defvar vlm-sc-map
       (make-sparse-keymap)
       "Syntax check commands keymap.")

     (defvar vlm-completion-map
       (make-sparse-keymap)
       "Completion commands keymap.")

     (defvar vlm-docs-map
       (make-sparse-keymap)
       "Docs commands keymap.")

     (defvar vlm-files-map
       (make-sparse-keymap)
       "Files commands keymap.")

     (defvar vlm-debug-map
       (make-sparse-keymap)
       "Debug commands keymap.")

     (defvar vlm-filter-map
       (make-sparse-keymap)
       "Filter commands keymap.")

     (defvar vlm-utils-map
       (make-sparse-keymap)
       "Utils commands keymap.")

     (defvar vlm-media-map
       (make-sparse-keymap)
       "Media commands keymap.")

     #+END_SRC

     Define maps as prefix commands, this prepares
     =keymaps= for use as a prefix key's binding.

     #+BEGIN_SRC emacs-lisp

     (dolist (prefix-map '(vlm-tags-map
                           vlm-tabs-map
                           vlm-rb-map
                           vlm-pm-map
                           vlm-sc-map
                           vlm-docs-map
                           vlm-files-map
                           vlm-filter-map
                           vlm-utils-map
                           vlm-window-map
                           vlm-media-map
                           vlm-completion-map))
       (define-prefix-command prefix-map))

     #+END_SRC

**** Binds

     All the new created =keymaps= are bound
     to =ctl-x-map= prefix.

     #+BEGIN_SRC emacs-lisp

     ;; vlm prefix maps
     (define-key ctl-x-map (kbd "f") 'vlm-files-map)
     ;; (define-key ctl-x-map (kbd "r") 'vlm-rb-map) ; register
     (define-key ctl-x-map (kbd "p") 'vlm-pm-map)
     (define-key ctl-x-map (kbd "t") 'vlm-tags-map)
     (define-key ctl-x-map (kbd "c") 'vlm-utils-map)
     (define-key ctl-x-map (kbd "e") 'vlm-sc-map) ; errors
     (define-key ctl-x-map (kbd "l") 'vlm-docs-map) ; library
     (define-key ctl-x-map (kbd "v") 'vlm-media-map) ; video/media
     (define-key ctl-x-map (kbd "<tab>") 'vlm-completion-map) ; tab (complete)

     #+END_SRC

*** Defer

    Used to seep up the emacs startup time.

**** Clean

     #+BEGIN_SRC emacs-lisp

     ;; clean file-name-handler-alist
     (setq file-name-handler-alist nil)

     #+END_SRC

**** Hooks

     #+BEGIN_SRC emacs-lisp

     ;; restore file-name-handler-alist
     (add-hook 'emacs-startup-hook
               (lambda ()
                 (setq file-name-handler-alist
                       saved-file-name-handler-alist)))

     #+END_SRC

*** Startup

    This file parses the command line and gets Emacs running.

**** Customize

     #+BEGIN_SRC emacs-lisp

     ;; non-nil inhibits the startup screen
     (customize-set-variable 'inhibit-startup-message nil)

     ;; non-nil inhibits the initial startup echo area message
     (customize-set-variable 'inhibit-startup-echo-area-message nil)

     ;; major mode command symbol to use for the initial *scratch* buffer
     (customize-set-variable 'initial-major-mode 'emacs-lisp-mode)

     ;; the full name of the user logged in
     (customize-set-variable 'user-full-name (getenv "USER"))

     ;; email address of the current user
     (customize-set-variable 'user-mail-address "lambdart@protonmail.com")

     #+END_SRC

*** Warnings

    This package implements the entry points `warn', `lwarn'
    and `display-warning'.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'warnings nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; minimum severity level for displaying the warning buffer
      (customize-set-variable 'warning-minimum-level :error)

      ;; minimum severity level for logging a warning.
      (customize-set-variable 'warning-minimum-log-level :warning)

      #+END_SRC

*** Load-path

    When Emacs loads a Lisp library, it searches for the library in a list
    of directories specified by the variable 'load-path'. The value
    of this variable is a list of directories to search when
    loading files.

    If the environment variable =EMACSLOADPATH= is set, it modifies the
    above initialization procedure. Emacs initializes `load-path' based on
    the value of the environment variable.

    The syntax of =EMACSLOADPATH= is the same as used for 'PATH';
    directories are separated by ':' (or ';', on some operating systems).
    Here is an example of how to set =EMACSLOADPATH= variable (from a
    'sh'-style shell).

    #+BEGIN_SRC sh

        export EMACSLOADPATH=$EMACSLOADPATH:~/.emacs.d/lisp:~/.emacs.d/site-lisp

    #+END_SRC

    See ~defaults/default.xinitrc~ file for a detailed example.

    For each directory in `load-path', Emacs then checks to see if it
    contains a file `subdirs.el', and if so, loads it. The `subdirs.el'
    file is created when Emacs is built/installed, and contains code that
    causes Emacs to add any subdirectories of those directories to
    `load-path'. Both immediate subdirectories and subdirectories multiple
    levels down are added. But it excludes subdirectories whose names do
    not start with a letter or digit, and subdirectories named 'RCS' or
    'CVS', and subdirectories containing a file named =.nosearch=.

    See ~defaults/default.subdir.el~ file example.

*** Load-prefer

    In noninteractive sessions, prioritize non-byte-compiled source files to
    prevent the use of stale byte-code. Otherwise, it saves us a little IO time
    to skip the mtime checks on every *.elc file.

    #+BEGIN_SRC emacs-lisp

    ;; (setq load-prefer-newer noninteractive)

    #+END_SRC

*** Sound
**** Beeping
***** Disable

      #+BEGIN_SRC emacs-lisp :tangle yes

      ;; do nothing (NOP)
      (customize-set-variable 'ring-bell-function (lambda () nil))

      #+END_SRC

** Basic
*** Definitions
**** Loaddefs

     The local ~lisp-loaddefs.el~ was generated by
     =update-directory-autoloads=, using the ~/emacs.d/lisp~
     directory as its base.

     Update/Generate =autoload= definitions for Lisp files in the directories.
     In an interactive call, you must give one argument, the name of a
     single directory. In a call from Lisp, you can supply multiple
     directories as separate arguments.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; generated by `update-directory-autolods'
      (require 'lisp-loaddefs nil t)

      #+END_SRC

*** Garbage Collector
**** Ghcm

     Enforce a sneaky Garbage Collection strategy to minimize GC
     interference with the activity. During normal use a high GC
     threshold is set. When idling GC is immediately triggered
     and a low threshold is set.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'gcmh nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; non-nil means print a message when garbage collecting
      (customize-set-variable 'gcmh-verbose nil)

      #+END_SRC

***** Hooks

      #+BEGIN_SRC emacs-lisp

      (add-hook 'window-setup-hook
                (lambda ()
                  (funcall 'gcmh-mode 1)))

      #+END_SRC

*** Compilation
***** Comp

      In addition to the byte-compilation, described in *note the previous
      chapter: Byte Compilation, Emacs can also optionally compile Lisp
      function definitions into a true compiled code, known as 'native code'.
      This feature uses the =libgccjit= library, which is part of the GCC
      distribution, and requires that Emacs be built with support for using
      that library. It also requires to have GCC and Binutils (the assembler
      and linker) available on your system for you to be able to
      native-compile Lisp code.

      Unlike byte-compiled code, natively-compiled Lisp code is executed
      directly by the machine's hardware, and therefore runs at full speed
      that the host CPU can provide. The resulting speedup generally depends
      on what the Lisp code does, but is usually 2.5 to 5 times faster than
      the corresponding byte-compiled code.

      Since native code is generally incompatible between different
      systems, the natively-compiled code is *not* transportable from one
      machine to another, it can only be used on the same machine where it was
      produced or on very similar ones (having the same CPU and run-time
      libraries). The transportability of natively-compiled code is the same
      as that of shared libraries (=.so= files).

****** Require

       #+BEGIN_SRC emacs-lisp

       ;; (require 'comp nil t)

       #+END_SRC

****** Customize

       #+BEGIN_SRC emacs-lisp

       ;; non-nil means unconditionally (re-)compile all files
       (customize-set-variable 'native-comp-always-compile t)

       ;; default number of subprocesses used for async native compilation
       ;; value of zero means to use half the number of the CPU's execution units
       (customize-set-variable 'native-comp-async-jobs-number 0)

       ;; emit a warning if a byte-code file being loaded has no corresponding source
       (customize-set-variable 'native-comp-warning-on-missing-source t)

       ;; if non-nil compile loaded .elc files asynchronously
       (customize-set-variable 'native-comp-deferred-compilation nil)

       ;; if non-nil, enable primitive trampoline synthesis
       (customize-set-variable 'comp-enable-subr-trampolines nil)

       #+END_SRC

****** Hooks

       #+BEGIN_SRC emacs-lisp

       #+END_SRC

*** Fundamental
**** Macros

     #+BEGIN_SRC emacs-lisp

     (defmacro safe-load-file (file)
       "Load FILE if exists."
       `(if (not (file-exists-p ,file))
            (message "File not found")
          (load (expand-file-name ,file) t nil nil)))

     (defmacro safe-add-dirs-to-load-path (dirs)
       "Add DIRS (directories) to `load-path'."
       `(dolist (dir ,dirs)
          (setq dir (expand-file-name dir))
          (when (file-directory-p dir)
            (unless (member dir load-path)
              (push dir load-path)))))

     (defmacro safe-funcall (func &rest args)
       "Call FUNC with ARGS, if it's bounded."
       `(when (fboundp ,func)
          (funcall ,func ,@args)))

     (defmacro safe-mkdir (dir)
       "Create DIR in the file system."
       `(when (and (not (file-exists-p ,dir))
                   (make-directory ,dir :parents))))

     #+END_SRC

**** Simple

     A grab-bag of basic Emacs commands not specifically related to
     some major mode or to file-handling.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'simple nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; don't omit information when lists nest too deep
      (customize-set-variable 'eval-expression-print-level 4)

      ;; your preference for a mail composition package
      (customize-set-variable 'mail-user-agent 'message-user-agent)

      #+END_SRC

***** Binds

      #+BEGIN_SRC emacs-lisp

      ;; shell command
      (global-set-key (kbd "M-<f5>") 'shell-command)
      (global-set-key (kbd "M-<f6>") 'async-shell-command)

      #+END_SRC


***** Enable

      #+BEGIN_SRC emacs-lisp

      ;; column number display in the mode line
      (add-hook 'window-setup-hook
                (lambda ()
                  (funcall 'column-number-mode 1)))

      ;; buffer size display in the mode line
      (add-hook 'window-setup-hook
                (lambda ()
                  (funcall 'size-indication-mode 1)))

      #+END_SRC

**** Lex
***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'lex nil t)

      #+END_SRC

***** Binds

      Fundamental/core binds.

      #+BEGIN_SRC emacs-lisp

      ;; line movement
      (global-set-key (kbd "C-a") 'back-to-indent-or-line)
      (global-set-key (kbd "C-e") 'move-end-of-line)

      ;; word movement
      (global-set-key (kbd "C-<left>") 'backward-word)
      (global-set-key (kbd "C-<right>") 'forward-whitespace)

      ;; scroll movement
      (global-set-key (kbd "C-M-v") 'scroll-other-window)
      (global-set-key (kbd "C-M-y") 'scroll-other-window-down)

      ;; edit
      (global-set-key (kbd "M-y") 'browse-kill-ring)
      (global-set-key (kbd "M-i") 'indent-region-or-buffer)
      (global-set-key (kbd "M-j") 'duplicate-line-or-region)
      (global-set-key (kbd "M-n") 'transpose-lines-up)
      (global-set-key (kbd "M-p") 'transpose-lines-down)
      (global-set-key (kbd "M-l") 'downcase-word)
      (global-set-key (kbd "C-w") 'kill-region-or-backward-word)

      ;; kill
      (define-key ctl-x-map (kbd "k") 'kill-buffer)

      ;; shell command history
      (define-key ctl-x-map (kbd "C-c") 'eval-command-history)
      (define-key ctl-x-map (kbd "C-<f6>") 'shell-command-history)

      ;; mark
      (define-key vlm-utils-map (kbd "h") 'mark-whole-buffer)
      (define-key vlm-utils-map (kbd "s") 'mark-sexp)
      (define-key vlm-utils-map (kbd "p") 'mark-paragraph)
      (define-key vlm-utils-map (kbd "w") 'mark-word)

      ;; goto
      (define-key goto-map (kbd "m") 'goto-mark)
      (define-key goto-map (kbd "M-m") 'goto-mark)

      ;; keyboard quit
      (global-set-key (kbd "M-ESC") 'keyboard-escape-quit)

      ;; in buffer completion
      ;; (global-set-key (kbd "TAB") 'completion-at-point)

      #+END_SRC

*** Network
**** Tramp

     TRAMP is for transparently accessing remote files from within Emacs.
     TRAMP enables an easy, convenient, and consistent interface to remote
     files as if they are local files.  TRAMP’s transparency extends to
     editing, version control, and dired.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'tramp nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; set tramp default method
      (customize-set-variable 'tramp-default-method "ssh")

      ;; if non-nil, chunksize for sending input to local process.
      (customize-set-variable 'tramp-chunksize 64)

      ;; a value of t would require an immediate reread during filename completion,
      ;; nil means to use always cached values for the directory contents
      (customize-set-variable 'tramp-completion-reread-directory-timeout 60)

      ;; set tramp verbose level
      (customize-set-variable 'tramp-verbose 4)

      ;; file which keeps connection history for tramp connections.
      (customize-set-variable
       'tramp-persistency-file-name
       (concat (expand-file-name user-emacs-directory) "cache/tramp"))

      ;; regexp to match prompts from remote shell
      (customize-set-variable 'tramp-shell-prompt-pattern
                              "\\(?:^\\|\\)[^]#$%>»\n]*#?[]#$%>»] *\\(\\[[[:digit:];]*[[:alpha:]] *\\)*")

      ;; when invoking a shell, override the HISTFILE with this value
      (customize-set-variable 'tramp-histfile-override nil)

      ;; default method to use for specific host/user pairs
      (customize-set-variable 'tramp-default-method-alist nil)

      ;; connection timeout in seconds
      (customize-set-variable 'tramp-connection-timeout 15)

      #+END_SRC

**** Imap

     This library provides an interface for talking to
     IMAP servers.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'imap nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; how long to wait between checking for the end of output
      (customize-set-variable 'imap-read-timeout 2)

      ;; if non-nil, store session password without prompting
      (customize-set-variable 'imap-store-password t)

      #+END_SRC

**** Smtpmail

     This library provides functionalities related to send mail
     through STMP protocol.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'smtpmail nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; specify default SMTP server
      ;; (customize-set-variable 'smtpmail-default-smtp-server "smtp.gmail.com")

      ;; the name of the host running SMTP server
      ;; (customize-set-variable 'smtpmail-smtp-server "smtp.gmail.com")

      ;; type of SMTP connections to use
      (customize-set-variable 'smtpmail-stream-type 'ssl)

      ;; smtp service port number
      (customize-set-variable 'smtpmail-smtp-service 465)

      ;; non-nil means mail is queued; otherwise it is sent immediately.
      (customize-set-variable 'smtpmail-queue-mail nil)

      ;; directory where smtpmail.el stores queued mail.
      ;; (customize-set-variable 'smtpmail-queue-dir "")

      #+END_SRC

**** Sendmail

     This mode provides mail-sending facilities from within Emacs.
     It is documented in the Emacs user's manual.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'sendmail nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; text inserted at end of mail buffer when a message is initialized
      (customize-set-variable 'mail-signature "Att.")

      ;; file containing the text inserted at end of mail buffer
      ;; default: ~/.signature
      ;; (customize-set-variable 'mail-signature-file nil)

      #+END_SRC

**** Net-utils

     Wrap common network utility programs (ping, traceroute, netstat,
     nslookup, arp, route). Note that these wrappers are of the diagnostic
     functions of these programs only.

     Implement some very basic protocols in Emacs Lisp (finger and whois)

     Support connections to HOST/PORT, generally for debugging and the like.
     In other words, for doing much the same thing as "telnet HOST PORT", and
     then typing commands.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'net-utils)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      #+END_SRC

*** Security
**** Nsm

     Network Security Manager.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'nsm nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; if a potential problem with the security of the network
      ;; connection is found, the user is asked to give input
      ;; into how the connection should be handled
      ;; `high': This warns about additional things that many
      ;; people would not find useful.
      ;; `paranoid': On this level, the user is queried for
      ;; most new connections
      (customize-set-variable 'network-security-level 'high)

      ;; the file the security manager settings will be stored in.
      (customize-set-variable 'nsm-settings-file
                              (expand-file-name "nsm/netword-security.data" user-emacs-directory))

      #+END_SRC

**** Epg-config
***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'eps-config nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; the gpg executable
      (customize-set-variable 'epg-gpg-program "gpg2")

      #+END_SRC

**** Tls

     This package implements a simple wrapper around "gnutls-cli" to
     make Emacs support TLS/SSL.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'tls nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; indicate if certificates should be checked against trusted root certs
      ;; if this is ‘ask’, the user can decide whether to accept an
      ;; untrusted certificate
      ;; (customize-set-variable 'tls-checktrust nil)

      ;; list of strings containing commands to
      ;; start TLS stream to a host
      ;; '("openssl s_client -connect %h:%p -CAfile %t")
      ;; '("gnutls-cli --x509cafile %t -p %p %h --insecure")

      ;; (customize-set-variable
      ;; 'tls-program
      ;; '("gnutls-cli --x509cafile /etc/ssl/certs/ca-certificates.crt -p %p %h"))

      #+END_SRC

**** Gnutls

     This package provides language bindings for the GnuTLS library
     using the corresponding core functions in gnutls.c

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'gnutls nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; if non-nil, this should be a TLS priority string
      (customize-set-variable 'gnutls-algorithm-priority nil)

      ;; if non-nil, this should be t or a list of checks
      ;; per hostname regex
      (customize-set-variable 'gnutls-verify-error nil)

      #+END_SRC

**** Epa

     EasyPG is an all-in-one GnuPG interface for Emacs.
     It has two aspects: convenient tools which allow to use GnuPG
     from Emacs (EasyPG Assistant), and a fully
     functional interface library to GnuPG (EasyPG Library).

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'epa nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; if non-nil, cache passphrase for symmetric encryption
      (customize-set-variable
       'epa-file-cache-passphrase-for-symmetric-encryption t)

      ;; if t, always asks user to select recipients
      (customize-set-variable 'epa-file-select-keys t)

      ;; in epa commands, a particularly useful mode is ‘loopback’, which
      ;; redirects all Pinentry queries to the caller, so Emacs can query
      ;; passphrase through the minibuffer, instead of external Pinentry
      ;; program
      (customize-set-variable 'epa-pinentry-mode 'loopback)

      #+END_SRC

***** Enable

      #+BEGIN_SRC emacs-lisp

      ;; (add-hook 'window-setup-hook
      ;;           (lambda ()
      ;;             (funcall 'epa-file-enable)))

      #+END_SRC

*** Notify
**** Notifications

     For proper usage, Emacs must be started in an environment with an
     active D-Bus session bus.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'notifications nil t)

      #+END_SRC

*** Storage
**** Forms

     Forms mode means visiting a data file which is supposed to consist
     of records each containing a number of fields. The records are
     separated by a newline, the fields are separated by a user-defined
     field separator (default: TAB). When shown, a record is
     transferred to an Emacs buffer and presented using a user-defined
     form. One record is shown at a time.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'forms nil t)

      #+END_SRC

*** Process
**** Async

     Adds the ability to call asynchronous functions and process with
     ease. See the documentation for `async-start' and `async-start-process'.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'async nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; the command in a new buffer with a name other than the default buffer name
      ;; without confirmation
      (customize-set-variable 'async-shell-command-buffer 'rename-buffer)

      #+END_SRC

***** Display

      #+BEGIN_SRC emacs-lisp

      ;; to run command without displaying the output in a window
      (add-to-list 'display-buffer-alist
                   '("\\*Async Shell Command\\*"
                     (display-buffer-no-window)
                     (allow-no-window . t)))

      #+END_SRC

*** Parses
**** Nnmail

     Mail support functions for the Gnus mail backends.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'nnmail nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; expirable articles that are older than this will be expired
      (customize-set-variable 'nnmail-expiry-wait 4)

      #+END_SRC

**** Mm-bodies

     This library handles MIME body (encode/decode).

     MIME is short for "Multipurpose Internet Mail Extensions".
     This standard is documented in a number of RFCs;
     mainly RFC2045 (Format of Internet Message Bodies),
     RFC2046 (Media Types), RFC2047 (Message Header Extensions for
     Non-ASCII Text),  RFC2048 (Registration Procedures),
     RFC2049 (Conformance Criteria and Examples).

     It is highly recommended that anyone who intends writing
     MIME-compliant software read at least RFC2045 and RFC2047.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'mm-bodies nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      (eval-after-load 'mm-bodies
        (lambda ()
          (when (boundp 'mm-body-charset-encoding-alist)
            (add-to-list 'mm-body-charset-encoding-alist '(utf-8 . base64)))))

      #+END_SRC

**** Shr

     This package takes a HTML parse tree (as provided by
     libxml-parse-html-region) and renders it in the current buffer.  It
     does not do CSS, JavaScript or anything advanced: It's geared
     towards rendering typical short snippets of HTML, like what you'd
     find in HTML email and the like.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'shr nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; frame width to use for rendering
      (customize-set-variable 'shr-width 80)

      ;; if non-nil, use proportional fonts for text
      (customize-set-variable 'shr-use-fonts nil)

      ;; if non-nil, respect color specifications in the HTML
      (customize-set-variable 'shr-use-colors t)

      ;; if non-nil, inhibit loading images
      (customize-set-variable 'shr-inhibit-images t)

      ;; images that have URLs matching this regexp will be blocked (regexp)
      (customize-set-variable 'shr-blocked-images nil)

      #+END_SRC

*** Misc
**** Custom

     Emacs has many settings which you can change. Most settings are
     customizable variables, which are also called user options.
     There is a huge number of customizable variables,
     controlling numerous aspects of Emacs behavior.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'custom nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; file used for storing customization information.
      ;; The default is nil, which means to use your init file
      ;; as specified by ‘user-init-file’.  If the value is not nil,
      ;; it should be an absolute file name.
      (customize-set-variable
       'custom-file (concat (expand-file-name user-emacs-directory) "custom.el"))

      #+END_SRC

** Vanilla

   Major Structures of Emacs: Files, Buffer, Windows, Frames, Input,
   International, Commands, Completions, Editing...

   Basically the 'C' (core) system and fundamental ELISP libraries.

*** Files

    A computer file is a computer resource for recording data
    discretely in a computer storage device.

**** Files

     Defines most of Emacs's file- and directory-handling functions,
     including basic file visiting, backup generation, link handling,
     ITS-id version control, load- and write-hook handling, and the like.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'files nil t)

      #+END_SRC

***** Functions

      #+BEGIN_SRC emacs-lisp

      (defun vlm-kill-emacs-query-function ()
        "Asks for Emacs kill confirmation."
        (interactive)
        (y-or-n-p "[kill-emacs]: Are you sure? "))

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; control use of version numbers for backup files.
      (customize-set-variable 'version-control t)

      ;; non-nil means always use copying to create backup files
      (customize-set-variable 'backup-by-copying t)

      ;; number of newest versions to keep when a new numbered backup is made
      (customize-set-variable 'kept-new-versions 6)

      ;; number of oldest versions to keep when a new numbered backup is made
      (customize-set-variable 'kept-old-versions 2)

      ;; if t, delete excess backup versions silently
      (customize-set-variable 'delete-old-versions t)

      ;; non-nil means make a backup of a file the first time it is saved
      (customize-set-variable 'make-backup-files nil)

      ;; non-nil says by default do auto-saving of every file-visiting buffer
      (customize-set-variable 'auto-save-default nil)

      ;; most *NIX tools work best when files are terminated
      ;; with a newline
      (customize-set-variable 'require-final-newline t)

      ;; non-nil if Emacs should confirm killing processes on exit
      (customize-set-variable 'confirm-kill-processes nil)

      ;; functions to call with no arguments to query about killing Emacs
      (customize-set-variable 'kill-emacs-query-functions
                              `(server-kill-emacs-query-function vlm-kill-emacs-query-function))

      ;; alist of filename patterns and backup directory names
      (customize-set-variable 'backup-directory-alist '(("" . "~/.emacs.d/backup")))

      #+END_SRC

***** Hooks

      #+BEGIN_SRC emacs-lisp

      ;; create cache directory if does not exists yet
      (add-hook 'window-setup-hook
                (lambda ()
                  (mkdir (concat user-emacs-directory "cache") t)))

      #+END_SRC

**** Ffap

     Command find-file-at-point.
     With a prefix, it behaves exactly like find-file.
     Without a prefix, it first tries to guess a default file or URL
     from the text around the point.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'ffap nil t)

      #+END_SRC

***** Binds

      #+BEGIN_SRC emacs-lisp

      ;; vlm-files-map
      (define-key vlm-files-map (kbd "f") 'find-file-at-point)
      (define-key vlm-files-map (kbd "d") 'dired-at-point)
      (define-key vlm-files-map (kbd "C-d") 'ffap-list-directory)

      #+END_SRC

**** Locate

     Locate.el provides an interface to a program which searches a
     database of file names. By default, this program is the GNU locate
     command, but it could also be the BSD-style find command, or even a
     user specified command.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'locate nil t)

      #+END_SRC

***** Binds

      #+BEGIN_SRC emacs-lisp

      (define-key vlm-files-map (kbd "l") 'locate)

      #+END_SRC

**** Recentf

     The recent files list is automatically saved across Emacs
     sessions. You can customize the number of recent files displayed,
     the location of the menu and others options
     (see the source code for details).

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'recentf nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; file to save the recent list into.
      (customize-set-variable
       'recentf-save-file (concat user-emacs-directory "cache/recentf"))

      #+END_SRC

***** Binds

      #+BEGIN_SRC emacs-lisp

      ;; vlm-files-map
      (define-key vlm-files-map (kbd "r") 'recentf-open-files)
      (define-key vlm-files-map (kbd "t") 'recentf-find-file)

      #+END_SRC

***** Enable

      #+BEGIN_SRC emacs-lisp

      (add-hook 'window-setup-hook
                (lambda ()
                  (safe-funcall 'recentf-mode 1)))

      #+END_SRC

**** Diff

     This package helps you explore differences between files, using the
     UNIX command diff(1). The commands are `diff' and `diff-backup'.
     You can specify options with `diff-switches'.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'diff nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; a string or list of strings specifying switches to be passed to diff
      (customize-set-variable 'diff-switches "-u")

      #+END_SRC

**** Ediff

     This package provides a convenient way of simultaneous browsing through
     the differences between a pair (or a triple) of files or buffers.
     The files being compared, file-A, file-B, and file-C (if applicable) are
     shown in separate windows (side by side, one above the another, or in
     separate frames), and the differences are highlighted as you step
     through them.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'ediff nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; options to pass to `ediff-custom-diff-program'.
      (customize-set-variable 'ediff-custom-diff-options "-U3")

      ;; the function used to split the main window between buffer-A and buffer-B
      (customize-set-variable 'ediff-split-window-function 'split-window-horizontally)

      ;; function called to set up windows
      (customize-set-variable 'ediff-window-setup-function 'ediff-setup-windows-plain)

      #+END_SRC

***** Hooks

      #+BEGIN_SRC emacs-lisp

      (add-hook 'ediff-startup-hook 'ediff-toggle-wide-display)
      (add-hook 'ediff-cleanup-hook 'ediff-toggle-wide-display)
      (add-hook 'ediff-suspend-hook 'ediff-toggle-wide-display)

      #+END_SRC

**** Jka-compr

     This package implements low-level support for reading, writing,
     and loading compressed files.  It hooks into the low-level file
     I/O functions (including write-region and insert-file-contents) so
     that they automatically compress or uncompress a file if the file
     appears to need it (based on the extension of the file name).
     Packages like Rmail, VM, GNUS, and Info should be able to work
     with compressed files without modification.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'jka-compr nil t)
      ;; (require 'jka-compr-hook nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; list of compression related suffixes to try when loading files
      (customize-set-variable 'jka-compr-load-suffixes '(".gz" ".el.gz"))

      ;; if you set this outside Custom while Auto Compression mode is
      ;; already enabled (as it is by default), you have to call
      ;; `jka-compr-update' after setting it to properly update other
      ;; variables. Setting this through Custom does that automatically.

      #+END_SRC

***** Enable

      #+BEGIN_SRC emacs-lisp

      ;; turn on the mode
      (add-hook 'window-setup-hook
                (lambda ()
                  (funcall 'auto-compression-mode 1)))

      #+END_SRC

**** Arc-mode

     Major mode for viewing an archive file in a dired-like way.
     You can move around using the usual cursor motion commands.
     Lettera no longer insert themselves.
     Type ‘e’ to pull a file out of the archive and into its own buffer;
     or click mouse-2 on the file’s line in the archive mode buffer.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'arc-mode nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC

      ;; TODO

      #+END_SRC

**** Dired

     This is a major mode for file management operations.

     The most common operations performed on files or groups of files
     include creating, opening (e.g. viewing, playing, editing or
     printing), renaming, moving or copying, deleting and searching
     for files, as well as modifying file attributes, properties and
     file permissions.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'dired nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; switches passed to ‘ls’ for dired
      (customize-set-variable 'dired-listing-switches "-al")

      ;; enable dired-find-alternate-file
      (add-hook 'window-setup-hook
                (lambda ()
                  (put 'dired-find-alternate-file 'disabled nil)))

      #+END_SRC

***** Binds

      #+BEGIN_SRC emacs-lisp

      ;; dired-mode-map
      (eval-after-load 'dired
        (lambda ()
          (when (boundp 'dired-mode-map)
            (define-key dired-mode-map (kbd "c") 'dired-do-copy)
            (define-key dired-mode-map (kbd "e") 'dired-create-empty-file)
            (define-key dired-mode-map (kbd "C") 'dired-do-compress-to)
            ;; redundancy
            (define-key dired-mode-map (kbd "RET") 'dired-find-alternate-file)
            (define-key dired-mode-map (kbd "C-j") 'dired-find-alternate-file))))

      ;; ctl-x-map (redundancy)
      (define-key ctl-x-map (kbd "d") 'dired)
      (define-key ctl-x-map (kbd "C-d") 'dired)

      #+END_SRC

*** Frames

    When Emacs is started on a graphical display, e.g., on the X Window
    System, it occupies a graphical system-level display region.  In this
    manual, we call this a “frame”, reserving the word “window” for the part
    of the frame used for displaying a buffer.

    - A frame initially contains one window, but it can be subdivided
      into multiple windows

      Configure/customize frame related options:

**** Require

     #+BEGIN_SRC emacs-lisp

     ;; (require 'frame nil t)

     #+END_SRC

**** Customize

     #+BEGIN_SRC emacs-lisp

     ;; with some window managers you may have to set this to non-nil
     ;; in order to set the size of a frame in pixels, to maximize
     ;; frames or to make them fullscreen.
     (customize-set-variable 'frame-resize-pixelwise t)

     ;; normalize before maximize
     (customize-set-variable 'x-frame-normalize-before-maximize t)

     ;; set frame title format
     (customize-set-variable 'frame-title-format
                             '((:eval (if (buffer-file-name)
                                          (abbreviate-file-name (buffer-file-name))
                                        "%b"))))

     ;; alist of parameters for the initial minibuffer frame.
     ;; (customize-set-variable 'minibuffer-frame-alist
     ;;                         '((top . 1)
     ;;                           (left . 1)
     ;;                           (width . 80)
     ;;                           (height . 2)))

     ;; alist of parameters for the initial X window frame
     (add-to-list 'initial-frame-alist '(fullscreen . fullheight))

     ;; alist of default values for frame creation
     (add-to-list 'default-frame-alist '(internal-border-width . 2))

     ;; adjust bottom dividers for frames individually
     (add-to-list 'default-frame-alist '(bottom-divider-width . 4))

     ;; default width of dividers on the right of windows.
     (customize-set-variable 'window-divider-default-right-width 5)

     ;; default width of dividers on bottom of windows
     (customize-set-variable 'window-divider-default-bottom-width 4)

     #+END_SRC

**** Hooks

     #+BEGIN_SRC emacs-lisp

     ;; set transparency after a frame is created
     (add-hook 'after-make-frame-functions
               (lambda (frame)
                 (set-transparency .8)))

     #+END_SRC

**** Binds

     #+BEGIN_SRC emacs-lisp

     ;; global map
     (global-set-key (kbd "C-x C-o") 'other-frame)

     #+END_SRC

**** Macros

     #+BEGIN_SRC emacs-lisp

     (defmacro safe-set-frame-font (font)
       "Set the default font to FONT."
       `(cond ((find-font (font-spec :name ,font))
               (set-frame-font ,font nil t))))

     #+END_SRC

**** Enable

     #+BEGIN_SRC emacs-lisp

     ;; window divider
     (add-hook 'window-setup-hook
               (lambda ()
                 (funcall 'window-divider-mode 1)))

     ;; blink cursor
     (add-hook 'window-setup-hook
               (lambda ()
                 (funcall 'blink-cursor-mode 1)))

     ;; set frame font
     (add-hook 'after-make-frame-functions
               (lambda (frame)
                 (safe-set-frame-font "Iosevka:pixelsize=20:width=regular:weight=regular")))

     #+END_SRC

*** Windows
**** Window

     Emacs windows system.

     Characteristics:

     - Each Emacs window displays one Emacs buffer at any time.
     - A single buffer may appear in more than one window.
     - Emacs can split a frame into two or many windows.
     - Multiple frames always imply multiple windows, because each
       frame has its own set of windows.
     - Each window belongs to one and only one frame.

       Configure/customize windows standard/basic options,
       the description of each one can be found on the
       commentaries.

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; number of lines of margin at the top and bottom of a window
      (customize-set-variable 'scroll-margin 0)

      ;; scroll up to this many lines, to bring point back on screen
      (customize-set-variable 'scroll-conservatively 1)

      ;; t means point keeps its screen position
      (customize-set-variable 'scroll-preserve-screen-position t)

      ;; non-nil means mouse commands use dialog boxes to ask questions
      (customize-set-variable 'use-dialog-box nil)

      ;; width in columns of left marginal area for display of a buffer
      (customize-set-variable 'left-margin-width 1)

      ;; width in columns of right marginal area for display of a buffer.
      (customize-set-variable 'right-margin-width 1)

      ;; if t, resize window combinations proportionally
      (customize-set-variable 'window-combination-resize t)

      ;; if non-nil ‘display-buffer’ will try to even window sizes
      (customize-set-variable 'even-window-sizes t)

      ;; if non-nil, left and right side windows occupy full frame height
      (customize-set-variable 'window-sides-vertical nil)

      ;; non-nil value means always make a separate frame
      (customize-set-variable 'pop-up-frames nil)

      #+END_SRC

***** Binds

      #+BEGIN_SRC emacs-lisp

      ;; binds (global)
      (global-set-key (kbd "s-l") 'shrink-window-horizontally)
      (global-set-key (kbd "s-h") 'enlarge-window-horizontally)
      (global-set-key (kbd "s-j") 'shrink-window)
      (global-set-key (kbd "s-k") 'enlarge-window)

      ;; next and previous buffer (on current window)
      (define-key ctl-x-map (kbd "C-,") 'previous-buffer)
      (define-key ctl-x-map (kbd "C-.") 'next-buffer)

      ;; binds (vlm-window prefix map)
      (define-key vlm-window-map (kbd "+") 'maximize-window)
      (define-key vlm-window-map (kbd "-") 'minimize-window)
      (define-key vlm-window-map (kbd "b") 'balance-windows)
      (define-key vlm-window-map (kbd "w") 'other-window-prefix)

      ;; binds ctl-x-map (C-x w)
      (define-key ctl-x-map (kbd "w") 'vlm-window-map)

      ;; switch to buffer
      (define-key ctl-x-map (kbd "C-b") 'switch-to-buffer)

      ;; kill buffer and window
      (define-key ctl-x-map (kbd "C-k") 'kill-buffer)

      ;; other window (redundancy)
      (define-key ctl-x-map (kbd "C-o") 'other-window)

      ;; switch to the last buffer in the buffer list
      (define-key ctl-x-map (kbd "C-u") 'unbury-buffer)

      #+END_SRC

***** Display

      In its most simplistic form, a frame accommodates always
      one single window that can be used for displaying a buffer.
      As a consequence, it is always the latest call of display-buffer
      that will have succeeded in placing its buffer there.

      #+BEGIN_SRC emacs-lisp

      #+END_SRC

**** Windmove

     This package defines a set of routines, windmove-{left,up,right,
     down}, for selection of windows in a frame geometrically.
     For example, `windmove-right' selects the window immediately to the
     right of the currently-selected one.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'windmove nil t)

      #+END_SRC

***** Enable

      #+BEGIN_SRC emacs-lisp

      ;; window move default keybinds (shift-up/down etc..)
      (add-hook 'window-setup-hook
                (lambda ()
                  (funcall 'windmove-default-keybindings)))

      #+END_SRC

**** Page

     This package provides the page-oriented movement and
     selection commands documented in the Emacs manual.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'page nil t)

      #+END_SRC

***** Enable

      #+BEGIN_SRC emacs-lisp

      ;; enable narrow functions
      (add-hook 'window-setup-hook
                (lambda ()
                  (put 'narrow-to-page 'disabled nil)
                  (put 'narrow-to-region 'disabled nil)))

      #+END_SRC

*** Buffers
**** Customize

     #+BEGIN_SRC emacs-lisp

     ;; non-nil means do not display continuation lines
     (customize-set-variable 'truncate-lines nil)

     ;; column beyond which automatic line-wrapping should happen
     (customize-set-variable 'fill-column 80)

     ;; character to draw the indicator when `display-fill-column-indicator'
     ;;  is non-nil
     (customize-set-variable 'display-fill-column-indicator-character 124)

     ;; sentences should be separated by a single space
     (customize-set-variable 'sentence-end-double-space nil)

     ;; list of functions called with no args to query before killing a buffer
     (customize-set-variable 'kill-buffer-query-functions nil)

     ;; enable erase-buffer
     (add-hook 'window-setup-hook
               (lambda ()
                 (put 'erase-buffer 'disabled nil)))

     #+END_SRC

**** Display

     #+BEGIN_SRC emacs-lisp

     #+END_SRC

***** Hl-line

      Provides a local minor mode (toggled by M-x hl-line-mode) and
      a global minor mode (toggled by M-x global-hl-line-mode) to
      highlight, on a suitable terminal, the line on which point is.

****** Require

       #+BEGIN_SRC emacs-lisp

       ;; (require 'hl-line nil t)

       #+END_SRC

****** Customize

       #+BEGIN_SRC emacs-lisp

       (make-variable-buffer-local 'global-hl-line-mode)

       #+END_SRC

****** Enable

       #+BEGIN_SRC emacs-lisp

       ;; enable highlight line
       (add-hook 'window-setup-hook
                 (lambda ()
                   (funcall 'global-hl-line-mode 1)))

       #+END_SRC

***** Linum

      Display line numbers format to be display in the current buffer.

****** Require

       #+BEGIN_SRC emacs-lisp

       ;; (require 'linum nil t)

       #+END_SRC

****** Customize

       #+BEGIN_SRC emacs-lisp

       ;; format used to display line numbers
       (customize-set-variable 'linum-format " %2d ")

       #+END_SRC

****** Hook

       #+BEGIN_SRC emacs-lisp

       ;; (add-hook 'prog-mode-hook 'linum-mode)

       #+END_SRC

***** Display-linum

      Display line numbers in the buffer.
      Provides a minor mode interface for `display-line-numbers'.

****** Require

       #+BEGIN_SRC emacs-lisp

       ;; (require 'display-line-numbers nil t)

       #+END_SRC

****** Customize

       #+BEGIN_SRC emacs-lisp

       ;; if non-nil, do not shrink line number width
       (customize-set-variable 'display-line-numbers-grow-only t)

       ;; if non-nil, count number of lines to use for line number width
       (customize-set-variable 'display-line-numbers-width-start t)

       ;; if an integer N > 0, highlight line number of every Nth line
       (customize-set-variable 'display-line-numbers-major-tick 0)

       ;; if an integer N > 0, highlight line number of every Nth line
       (customize-set-variable 'display-line-numbers-minor-tick 0)

       #+END_SRC

****** Hooks

       #+BEGIN_SRC emacs-lisp

       (add-hook 'prog-mode-hook 'display-line-numbers-mode)

       #+END_SRC

****** Enable

       #+BEGIN_SRC emacs-lisp

       ;; (safe-funcall 'global-display-line-numbers-mode 1)

       #+END_SRC

***** Display-column-indicator

      This library provides the display of the column indicator.

****** Require
****** Customize
****** Hooks

       #+BEGIN_SRC emacs-lisp

       (add-hook 'prog-mode-hook
                 (lambda ()
                   (display-fill-column-indicator-mode 1)))

       #+END_SRC

****** Binds
***** Cursor

      On a text terminal, the cursor's appearance is controlled by the
      terminal, largely out of the control of Emacs.
      Some terminals offer two different cursors: a visible static
      cursor, and a very visible blinking cursor.
      By default, Emacs uses the very visible cursor, and switches
      to it when you start or resume Emacs. If the variable
      visible-cursor is nil when Emacs starts or resumes, it uses
      the normal cursor.

****** Customize

       #+BEGIN_SRC emacs-lisp

       ;; non-nil means to make the cursor very visible
       (customize-set-variable 'visible-cursor t)

       ;; display a horizontal bar cursor with height HEIGHT
       (customize-set-variable 'cursor-type '(hbar . 2))

       ;; non-nil means show a cursor in non-selected windows
       (customize-set-variable 'cursor-in-non-selected-windows t)

       #+END_SRC

*** Conding-System

    Emacs supports a wide variety of international character sets, including
    European and Vietnamese variants of the Latin alphabet, as well as
    Arabic scripts, Brahmic scripts (for languages such as Bengali, Hindi,
    and Thai), Cyrillic, Ethiopic, Georgian, Greek, Han (for Chinese and
    Japanese), Hangul (for Korean), Hebrew and IPA.  Emacs also supports
    various encodings of these characters that are used by other
    internationalized software, such as word processors and mailers.

    Configure/set coding-system (UTF8), everywhere!

**** Customize

     #+BEGIN_SRC emacs-lisp

     ;; coding system to use with system messages
     (customize-set-variable 'locale-coding-system 'utf-8)

     ;; coding system to be used for encoding the buffer contents on saving
     (customize-set-variable 'buffer-file-coding-system 'utf-8)

     #+END_SRC


**** Mule

     Basic commands for multilingual environment.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'mule nil t)

      #+END_SRC

***** Customize
***** Hooks

      #+BEGIN_SRC emacs-lisp

      (add-hook 'window-setup-hook
                (lambda ()
                  (progn
                    ;; set coding system of terminal output to coding-system
                    (set-terminal-coding-system 'utf-8)
                    ;; set coding system for keyboard input on terminal
                    ;; to coding-system
                    (set-keyboard-coding-system 'utf-8)
                    ;; make coding-system used for communicating
                    ;; with other X clients
                    (set-selection-coding-system 'utf-8))))

      #+END_SRC

**** Mule-cmds

     Commands for multilingual environment.

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; set-language-enviornment sets default-input-method, which is unwanted
      (customize-set-variable 'default-input-method nil)

      #+END_SRC

***** Hooks

      #+BEGIN_SRC emacs-lisp

      (add-hook 'window-setup-hook
                (lambda ()
                  (progn
                    ;; add coding-system at the front of the priority list
                    ;; for automatic detection
                    (prefer-coding-system 'utf-8)
                    ;; set coding system (UFT8)
                    (set-language-environment "UTF-8"))))

      #+END_SRC

*** Commands
**** History

     Commands history.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'chistory nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; maximum length of history lists before truncation takes place
      (customize-set-variable 'history-length 2048)

      ;; list history of commands that used the minibuffer
      (customize-set-variable 'list-command-history-max history-length)

      #+END_SRC

***** Bind

      #+BEGIN_SRC emacs-lisp

      ;; bind list-command-history command
      (define-key vlm-utils-map (kbd "c") 'list-command-history)

      #+END_SRC


**** Minibuffer

     The minibuffer is where Emacs commands read complicated arguments,
     such as file names, buffer names, Emacs command names, or Lisp
     expressions. We call it the `minibuffer' because it's a special-purpose
     buffer with a small amount of screen space. You can use the usual Emacs
     editing commands in the minibuffer to edit the argument text.

     When the minibuffer is in use, it appears in the echo area, with a
     cursor. The minibuffer starts with a `prompt', usually ending with
     a colon.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'minibuffer nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; non-nil means to allow minibuffer commands while in the minibuffer
      (customize-set-variable 'enable-recursive-minibuffers nil)

      ;; if non-nil, `read-answer' accepts single-character answers
      (customize-set-variable 'read-answer-short t)

      ;; non-nil means completion ignores case when reading a buffer name
      (customize-set-variable 'read-buffer-completion-ignore-case t)

      ;; non-nil means when reading a file name completion ignores case
      (customize-set-variable 'read-file-name-completion-ignore-case nil)

      ;; number of completion candidates below which cycling is used
      (customize-set-variable 'completion-cycle-threshold nil)

      ;; treat the SPC or - inserted by minibuffer-complete-word as delimiters
      (customize-set-variable 'completion-pcm-complete-word-inserts-delimiters t)

      ;; a string of characters treated as word delimiters for completion
      (customize-set-variable 'completion-pcm-word-delimiters "-_./:| ")

      ;; if non-nil, print helpful inline messages during completion
      (customize-set-variable 'completion-show-inline-help nil)

      ;; non-nil means automatically provide help for invalid completion input
      (customize-set-variable 'completion-auto-help nil)

      ;; the value can be nil to disable sorting
      (customize-set-variable 'completions-sort nil)

      ;; non-nil means don't consider case significant in completion
      (customize-set-variable 'completion-ignore-case t)

      ;; non-nil means flex completion rejects spaces in search pattern
      (customize-set-variable 'completion-flex-nospace nil)

      ;; list of completion styles to use: see `completion-styles-alist variable
      ;; (customize-set-variable 'completion-styles
      ;;                         '(basic emacs22 partial-completion initials flex))

      (customize-set-variable 'completion-styles
                              '(basic emacs22 partial-completion initials orderless))

      ;; list of category-specific user overrides for completion styles
      (customize-set-variable 'completion-category-overrides
                              '((buffer (styles substring basic emacs22))
                                (info-menu (styles basic))))

      ;; define the appearance and sorting of completions
      (customize-set-variable 'completions-format 'one-column)

      ;; when non-nil, display completions with details added as prefix/suffix
      (customize-set-variable 'completions-detailed nil)

      ;; how to resize mini-windows (the minibuffer and the echo area)
      (customize-set-variable 'resize-mini-windows nil)

      ;; maximum height for resizing mini-windows (the minibuffer and the echo area)
      (customize-set-variable 'max-mini-window-height 1)

      ;; format string used to output "default" values
      (customize-set-variable 'minibuffer-default-prompt-format "[%s]")

      ;; if non-nil, shorten "(default ...)" to "[...]" in minibuffer prompts
      (customize-set-variable 'minibuffer-eldef-shorten-default t)

      ;; non-nil means entering the minibuffer raises the minibuffer's frame
      (customize-set-variable 'minibuffer-auto-raise t)

      ;; non-nil means to delete duplicates in history
      (customize-set-variable 'history-delete-duplicates t)

      ;; any other value means the minibuffer will move onto another frame, but
      ;; only when the user starts using a minibuffer there
      (customize-set-variable 'minibuffer-follows-selected-frame t)

      ;; special hook to find the completion table for the entity at point (default)
      (customize-set-variable 'completion-at-point-functions
                              `(elisp-completion-at-point
                                tags-completion-at-point-function t))

      #+END_SRC

***** Hooks

      #+BEGIN_SRC emacs-lisp

      ;; defer garbage collection
      ;; set `gc-cons-threshold' to most-positive-fixnum
      ;; the largest lisp integer value representation
      (add-hook 'minibuffer-setup-hook
                (lambda ()
                  (setq gc-cons-threshold most-positive-fixnum)))

      ;; reset threshold to inital value (16 megabytes)
      (add-hook 'minibuffer-exit-hook
                (lambda () (run-at-time 1 nil
                                        (lambda ()
                                          (setq gc-cons-threshold 16777216)))))

      #+END_SRC

***** Binds

      #+BEGIN_SRC emacs-lisp

      ;; minibuffer-local-map
      (define-key minibuffer-local-map (kbd "M-`") 'minibuffer-completion-help)
      (define-key minibuffer-local-map (kbd "M-w") 'minibuffer-complete-word)
      (define-key minibuffer-local-map (kbd "<tab>") 'minibuffer-complete)

      ;; global
      ;; (global-set-key (kbd "<C-delete>") 'quit-minibuffer)

      #+END_SRC

***** Enable

      #+BEGIN_SRC emacs-lisp

      ;; if `file-name-shadow-mode' is active, any part of the
      ;; minibuffer text that would be ignored because of this is given the
      ;; properties in `file-name-shadow-properties', which may
      ;; be used to make the ignored text invisible, dim, etc.
      (add-hook 'window-setup-hook
                (lambda()
                  (funcall 'file-name-shadow-mode 0)))

      ;; when active, minibuffer prompts that show a default value only show
      ;; the default when it's applicable
      (add-hook 'window-setup-hook
                (lambda()
                  (funcall 'minibuffer-electric-default-mode 1)))

      #+END_SRC

**** Mb-depth

     When active, any recursive use of the minibuffer will show
     the recursion depth in the =minibuffer= prompt. This is only
     useful if `enable-recursive-minibuffers' is non-nil.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'mb-depth nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      #+END_SRC

***** Hooks
***** Enable

      #+BEGIN_SRC emacs-lisp

      (add-hook 'window-setup-hook
                (lambda()
                  (funcall 'minibuffer-depth-indicate-mode 1)))

      #+END_SRC

**** Savehist

     Many editors (e.g. Vim) have the feature of saving minibuffer
     history to an external file after exit.  This package provides the
     same feature in Emacs.  When set up, it saves recorded minibuffer
     histories to a file (`~/.emacs-history' by default).  Additional
     variables may be specified by customizing
     `savehist-additional-variables'.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'savehist nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; file name where minibuffer history is saved to and loaded from.
      (customize-set-variable
       'savehist-file (concat user-emacs-directory "cache/history"))

      ;; if non-nil, save all recorded minibuffer histories.
      (customize-set-variable 'savehist-save-minibuffer-history t)

      #+END_SRC

***** Enable

      #+BEGIN_SRC emacs-lisp

      ;; enable savehist mode
      (add-hook 'window-setup-hook
                (lambda ()
                  (funcall 'savehist-mode 1)))

      #+END_SRC

**** Completion

     After you type a few characters, pressing the `complete'
     key inserts the rest of the word you are likely to type.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'completion nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; custom
      ;; how far to search in the buffer when looking for completions,
      ;; if nil, search the whole buffer
      (customize-set-variable 'completion-search-distance 12000)

      ;; if non-nil, the next completion prompt does a cdabbrev search
      (customize-set-variable 'completion-cdabbrev-prompt-flag nil)

      ;; non-nil means show help message in *Completions* buffer
      (customize-set-variable 'completion-show-help nil)

      ;; minimum output speed at which to display next potential completion
      (customize-set-variable 'completion-prompt-speed-threshold 2400)

      ;; non-nil means separator characters mark previous word as used
      (customize-set-variable 'completion-on-separator-character t)

      ;; the filename to save completions to.
      (customize-set-variable
       'save-completions-file-name
       (expand-file-name "cache/completitions" user-emacs-directory))

      ;; non-nil means save most-used completions when exiting emacs
      (customize-set-variable 'save-completions-flag t)

      ;; discard a completion if unused for this many hours.
      ;; (1 day = 24, 1 week = 168)
      ;; if this is 0, non-permanent completions
      ;; will not be saved unless these are used
      (customize-set-variable 'save-completions-retention-time 168)

      #+END_SRC

***** Display

      #+BEGIN_SRC emacs-lisp

      ;; (add-to-list 'display-buffer-alist
      ;;              '("\\*Completions\\*"
      ;;                (display-buffer-below-selected display-buffer-at-bottom)
      ;;                (window-height . fit-window-to-buffer)))

      (add-to-list 'display-buffer-alist
                   '("\\*Completions\\*"
                     nil
                     (window-parameters (mode-line-format . none))))

      #+END_SRC

***** Binds

      #+BEGIN_SRC emacs-lisp

      ;; completion-list-mode-map
      (define-key completion-list-mode-map (kbd "q") 'delete-completion-window)
      (define-key completion-list-mode-map (kbd "d") 'delete-completion-line)
      (define-key completion-list-mode-map (kbd "w") 'kill-ring-save)
      (define-key completion-list-mode-map (kbd "RET") 'choose-completion)
      (define-key completion-list-mode-map (kbd "TAB") 'next-completion)
      (define-key completion-list-mode-map (kbd "DEL") 'previous-completion)
      (define-key completion-list-mode-map (kbd "C-j") 'choose-completion)
      (define-key completion-list-mode-map (kbd "C-g") 'quit-minibuffer)

      #+END_SRC

***** Enable

      #+BEGIN_SRC emacs-lisp

      ;; enable dynamic completion mode
      (add-hook 'window-setup-hook
                (lambda ()
                  (funcall 'dynamic-completion-mode 0)))

      #+END_SRC

**** Edm
***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'edm nil t)

      #+END_SRC

***** Binds

      #+BEGIN_SRC emacs-lisp

      (eval-after-load 'edm
        (lambda ()
          ;; global
          (global-set-key (kbd "M-x") 'execute-extended-command)
          (global-set-key (kbd "C-M-x") 'edm-execute-extended-command)
          ;; minibuffer
          (define-key minibuffer-local-map
                      (kbd "M-`") 'edm-display-menu-buffer)
          ;; ctl-x-map
          (define-key ctl-x-map (kbd "x") 'edm-execute-keymap-command)
          (define-key ctl-x-map (kbd "C-x") 'edm-execute-local-keymap-command)))

      ;; reference (backup)
      ;; (global-set-key (kbd "M-x") 'execute-extended-command)

      #+END_SRC

***** Enable

      #+BEGIN_SRC emacs-lisp

      ;; enable globally
      (add-hook 'window-setup-hook
                (lambda ()
                  (funcall 'edm-mode 1)))

      #+END_SRC

**** Icomplete

     This package implements a more fine-grained minibuffer
     completion feedback scheme. Prospective completions are concisely
     indicated within the minibuffer itself, with each successive
     keystroke.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'icomplete nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; custom
      ;; pending-completions number over which to apply `icomplete-compute-delay
      (customize-set-variable 'icomplete-delay-completions-threshold 512)

      ;; maximum number of initial chars to apply `icomplete-compute-delay
      (customize-set-variable 'icomplete-max-delay-chars 2)

      ;; completions-computation stall, used only with large-number completions
      (customize-set-variable 'icomplete-compute-delay 0)

      ;; when non-nil, show completions when first prompting for input
      (customize-set-variable 'icomplete-show-matches-on-no-input t)

      ;; if non-nil, automatically delete superfluous parts of file names
      (customize-set-variable 'icomplete-tidy-shadowed-file-names t)

      ;; when non-nil, hide common prefix from completion candidates
      (customize-set-variable 'icomplete-hide-common-prefix nil)

      ;; maximum number of lines to use in the minibuffer
      (customize-set-variable 'icomplete-prospects-height 1)

      ;; string used by Icomplete to separate alternatives in the minibuffer
      ;; (customize-set-variable 'icomplete-separator (propertize " • " 'face 'shadow))
      ;; (customize-set-variable 'icomplete-separator (propertize " · " 'face 'shadow))
      (customize-set-variable 'icomplete-separator (propertize " | " 'face 'shadow))

      ;; specialized completion tables with which `icomplete' should operate,
      ;; if this is t, `icomplete operates on all tables
      (customize-set-variable 'icomplete-with-completion-tables t)

      ;; if non-nil, also use icomplete when completing in non-mini buffers
      (customize-set-variable 'icomplete-in-buffer nil)

      #+END_SRC

***** Binds

      #+BEGIN_SRC emacs-lisp

      (eval-after-load 'icomplete
        (lambda ()
          (when (boundp 'icomplete-minibuffer-map)
            ;; unbind
            (define-key icomplete-minibuffer-map (kbd "SPC") nil)
            ;; bind
            (define-key icomplete-minibuffer-map (kbd "C-j") 'icomplete-force-complete-and-exit)
            (define-key icomplete-minibuffer-map (kbd "M-<tab>") 'icomplete-forward-completions)
            (define-key icomplete-minibuffer-map (kbd "M-DEL") 'icomplete-backward-completions)
            (define-key icomplete-minibuffer-map (kbd "<left>") 'icomplete-fido-backward-updir)
            (define-key icomplete-minibuffer-map (kbd "C-n") 'next-line-or-history-element)
            (define-key icomplete-minibuffer-map (kbd "C-p") 'previous-line-or-history-element))))

      #+END_SRC

***** Enable

      #+BEGIN_SRC emacs-lisp

      ;; enable globally
      (add-hook 'window-setup-hook
                (lambda ()
                  (funcall 'icomplete-mode 0)))

      #+END_SRC

*** Screen

    On a graphical display, such as on GNU/Linux using the X Window System,
    Emacs occupies a graphical window.  On a text terminal, Emacs occupies
    the entire terminal screen. We will use the term `frame' to mean a
    graphical window or terminal screen occupied by Emacs. Emacs behaves
    very similarly on both kinds of frames. It normally starts out with
    just one frame, but you can create additional frames if you wish.

**** Tab-bar

     Provides `tab-bar-mode' to control display of the tab bar and
     bindings for the global tab bar.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'tab-bar nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; defines where to show the close tab button
      (customize-set-variable 'tab-bar-close-button-show nil)

      ;; if non-nil, show the "New tab" button in the tab bar
      (customize-set-variable 'tab-bar-new-button-show nil)

      ;; string that delimits tabs
      (customize-set-variable 'tab-bar-separator " ")

      ;; if the value is ‘1’, then hide the tab bar when it has only one tab-bar-show
      ;; if t, enable `tab-bar-mode' automatically on using the commands that
      ;; create new window configurations
      (customize-set-variable 'tab-bar-show t)

      ;; if 'rightmost', create as the last tab
      (customize-set-variable 'tab-bar-new-tab-to "rightmost")

      ;; if 'recent', select the most recently visited tab
      (customize-set-variable 'tab-bar-close-tab-select "recent")

      ;; when this variable is nil, the width of each tab is determined by the
      ;; length of the tab’s name.
      (customize-set-variable 'tab-bar-auto-width nil)

      ;; list of modifier keys for selecting a tab by its index digit (testing)
      ;; (customize-set-variable 'tab-bar-select-tab-modifiers '("super"))

      ;; show absolute numbers on tabs in the tab bar before the tab name
      (customize-set-variable 'tab-bar-tab-hints nil)

      #+END_SRC

***** Enable

      #+BEGIN_SRC emacs-lisp

      (add-hook 'window-setup-hook
                (lambda ()
                  (funcall 'tab-bar-mode 1)))

      #+END_SRC

**** Tool-bar

     Provides `tool-bar-mode' to control display of the tool-bar and
     bindings for the global tool bar with convenience functions
     `tool-bar-add-item' and `tool-bar-add-item-from-menu'.

     Tool bar in all graphical frames disabled by default.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'tool-bar nil t)

      #+END_SRC

***** Binds

      #+BEGIN_SRC emacs-lisp

      (define-key vlm-tags-map (kbd "t") 'tab-switcher)

      #+END_SRC

***** Disable

      #+BEGIN_SRC emacs-lisp

      (add-hook 'window-setup-hook
                (lambda ()
                  (safe-funcall 'tool-bar-mode 0)))

      #+END_SRC

**** Tooltip

     When this global minor mode is enabled, Emacs displays help
     text (e.g. for buttons and menu items that you put the mouse on)
     in a pop-up window.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'tooltip nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; seconds to wait before displaying a tooltip the first time.
      (customize-set-variable 'tooltip-delay 0.2)

      ;; use the echo area instead of tooltip frames for help and GUD tooltips
      (customize-set-variable 'tooltip-use-echo-area t)

      #+END_SRC

**** Menu-bar

     Each Emacs frame normally has a "menu bar" at the top which you can use
     to perform common operations. There's no need to list them here, as you
     can more easily see them yourself.

     Disabled by default.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'menu-bar nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp :tangle yes

      #+END_SRC

***** Binds

      #+BEGIN_SRC emacs-lisp

      (define-key vlm-utils-map (kbd "o") 'menu-bar-open)

      #+END_SRC

***** Disable

      #+BEGIN_SRC emacs-lisp

      (add-hook 'window-setup-hook
                (lambda ()
                  (safe-funcall 'menu-bar-mode 0)))

      #+END_SRC

**** Scroll-bar

     Specify whether to have vertical scroll bars, and on which side.
     Disabled by default.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'scroll-bar nil t)

      #+END_SRC

***** Disable

      #+BEGIN_SRC emacs-lisp

      ;; disable scroll bar
      (add-hook 'window-setup-hook
                (lambda ()
                  (safe-funcall 'scroll-bar-mode 0)))

      #+END_SRC

**** Fringe

     Contains code to initialize the built-in fringe bitmaps
     as well as helpful functions for customizing the appearance of the
     fringe.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'fringe nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; ("no-fringes" . 0), remove ugly icons to represet new lines
      ;; ascii is more than enough to represent this information
      (customize-set-variable 'fringe-mode 0)

      #+END_SRC

**** Mode-line

     Each Emacs window (aside from minibuffer windows) typically has a mode
     line at the bottom, which displays status information about the buffer
     displayed in the window. The mode line contains information about the
     buffer, such as its name, associated file, depth of recursive editing,
     and major and minor modes.

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; remove underline
      (customize-set-variable 'x-underline-at-descent-line t)

      ;; mode-line format
      (customize-set-variable 'mode-line-format
                              '(
                                " "
                                "λ"
                                " "
                                "»"
                                " "
                                "("
                                (:eval (format-time-string "%H:%M"))
                                ")"
                                ;;"¦"
                                ;; "
                                ;; mode-line-front-space
                                " "
                                "("
                                mode-line-modified
                                mode-line-remote
                                "%n"
                                ")"
                                " "
                                "(%p)"
                                " "
                                ;; "¦"
                                "(%l'%c)"
                                " "
                                (:eval (propertized-buffer-identification "(%b)"))
                                " "
                                ;; "·"
                                ;; " "
                                "("
                                (:eval (upcase (replace-regexp-in-string "-mode" "" (symbol-name major-mode))))
                                ")"
                                ;; " "
                                ;; mode-line-process
                                ))

      #+END_SRC

**** Wallpaper
***** Wall-mode
****** Require

       #+BEGIN_SRC emacs-lisp

       ;; (require 'wall nil t)

       #+END_SRC

****** Customize

       #+BEGIN_SRC emacs-lisp

       (customize-set-variable 'wall-root-dir
                               "/storage/media/images/wallpapers")

       #+END_SRC

****** Enable

       #+BEGIN_SRC emacs-lisp

       (add-hook 'window-setup-hook
                 (lambda ()
                   (progn
                     (safe-funcall 'wall-mode)
                     (safe-funcall 'wall-set-random-wallpaper))))

       #+END_SRC

**** X

     #+BEGIN_SRC emacs-lisp

     ;; non-nil means normalize frame before maximizing (not working)
     ;; (customize-set-variable 'x-frame-normalize-before-maximize nil)

     ;; if non-nil with a Gtk+ built Emacs, the Gtk+ tooltip is used
     (customize-set-variable 'x-gtk-use-system-tooltips t)

     ;; if this equals the symbol ’hide’, Emacs temporarily hides the child
     ;; frame during resizing (testing)
     (customize-set-variable 'x-gtk-resize-child-frames 'resize-mode)

     #+END_SRC

*** Text
**** Indent

     Commands for making and changing indentation in text.
     These are described in the Emacs manual.

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; indentation can insert tabs if this is non-nil
      (customize-set-variable 'indent-tabs-mode nil)

      ;; default number of columns for margin-changing functions to indent
      (customize-set-variable 'standard-indent 4)

      ;; distance between tab stops (for display of tab characters), in columns.
      (customize-set-variable 'tab-width 4)

      ;; if 'complete, TAB first tries to indent the current line
      ;; if t, hitting TAB always just indents the current line
      ;; If nil, hitting TAB indents the current line if point is at the left margin
      ;; or in the line's indentation
      (customize-set-variable 'tab-always-indent 'complete)

      #+END_SRC

**** Kmacro

     The kmacro package provides the user interface to emacs' basic
     keyboard macro functionality.  With kmacro, two function keys are
     dedicated to keyboard macros, by default F3 and F4.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'kmacro nil t)

      #+END_SRC

***** Binds

      #+BEGIN_SRC emacs-lisp

      (define-key ctl-x-map (kbd "m") 'kmacro-keymap)

      #+END_SRC

**** Elec-pair

     Electric pairing: automatically matches parenthesis pairs,
     should be enabled regardless the current major mode.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'elec-pair nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; alist of pairs that should be used regardless of major mode.
      (customize-set-variable 'electric-pair-pairs
                              '((?\{ . ?\})
                                (?\( . ?\))
                                (?\[ . ?\])
                                (?\" . ?\")))

      #+END_SRC

***** Enable

      #+BEGIN_SRC emacs-lisp

      (add-hook 'window-setup-hook
                (lambda ()
                  (funcall 'electric-pair-mode 1)))

      #+END_SRC

**** Newcomment

     This library contains functions and variables for commenting and
     uncommenting source code.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'newcomment nil t)

      #+END_SRC

***** Binds

      #+BEGIN_SRC emacs-lisp

      ;; global-map
      (global-set-key (kbd "M-c") 'comment-line)

      #+END_SRC

**** Face-remap

     This package defines some simple operations that can be used for
     maintaining the `face-remapping-alist' in a cooperative way.
     This is especially important for the `default' face.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'face-remap nil t)

      #+END_SRC

***** Binds

      #+BEGIN_SRC emacs-lisp

      ;; ctl-x-map (C-x)
      (define-key ctl-x-map (kbd "=") 'text-scale-adjust)

      #+END_SRC

**** Isearch

     Incremental search minor mode.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'isearch nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; if t, default to regexp searches
      (customize-set-variable 'search-default-mode t)

      ;; show match numbers in the search prompt
      (customize-set-variable 'isearch-lazy-count t)

      ;; controls the highlighting during incremental search
      (customize-set-variable 'isearch-lazy-highlight t)

      ;; if this variable is nil, `isearch-exit' always exits the search;
      (customize-set-variable 'search-nonincremental-instead nil)

      ;; non-nil enables searching multiple related buffers, in certain modes
      (customize-set-variable 'multi-isearch-search t)

      #+END_SRC

***** Binds

      #+BEGIN_SRC emacs-lisp

      (define-key search-map (kbd "M-s") 'isearch-forward-thing-at-point)
      (define-key search-map (kbd ".") 'isearch-forward-symbol-at-point)
      (define-key search-map (kbd "M-.") 'isearch-forward-symbol-at-point)

      #+END_SRC

**** Delsel

     This package makes the active region be pending delete, meaning that
     text inserted while the region is active will replace the region contents.
     This is a popular behavior of personal computers text editors.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'delsel nil t)

      #+END_SRC

***** Enable

      #+BEGIN_SRC emacs-lisp

      ;; delete selection-mode
      (add-hook 'window-setup-hook
                (lambda ()
                  (funcall 'delete-selection-mode 1)))

      #+END_SRC

**** Replace

     This package supplies the string and regular-expression replace functions
     documented in the Emacs user's manual.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'replace nil t)

      #+END_SRC

***** Binds

      #+BEGIN_SRC emacs-lisp

      (define-key search-map (kbd "M-o") 'list-occurrences-at-point)

      #+END_SRC

**** Rectangle

     Rectangle: Operations on rectangles!

     This package provides the operations on rectangles that are documented
     in the Emacs manual.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'rect nil t)

      #+END_SRC

***** Binds

      #+BEGIN_SRC emacs-lisp

      ;; global map
      (global-set-key (kbd "C-x r %") 'replace-rectangle)

      #+END_SRC

**** Whitespace

     This package is a minor mode to visualize and clean
     blanks (TAB, (HARD) SPACE and NEWLINE).

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'whitespace nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; specify which kind of blank is visualized
      ;; empty was removed
      (customize-set-variable
       'whitespace-style
       '(face
         tabs spaces trailing lines
         space-before-tab newline indentation
         space-after-tab space-mark tab-mark
         newline-mark missing-newline-at-eof))

      #+END_SRC

***** Hooks

      #+BEGIN_SRC emacs-lisp

      ;; clean whitespace and newlines before buffer save
      (add-hook 'before-save-hook #'whitespace-cleanup)

      #+END_SRC

***** Binds

      #+BEGIN_SRC emacs-lisp

      ;; binds
      (define-key ctl-x-map (kbd ".") 'whitespace-mode)

      #+END_SRC

*** Menus
**** Tmm

     This package provides text mode access to the menu bar.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'tmm nil t)

      #+END_SRC

*** Server

    Allow this Emacs process to be a server for client processes.
    This starts a server communications subprocess through which
    client "editors" can send your editing commands to this
    Emacs job. To use the server, set up the program emacsclient
    in the Emacs distribution as your standard "editor".

**** Require

     #+BEGIN_SRC emacs-lisp

     ;; (require 'server nil t)

     #+END_SRC

**** Hooks

     #+BEGIN_SRC emacs-lisp

     ;; (add-hook 'after-init-hook
     ;;           (lambda ()
     ;;             (safe-funcall 'server-start)))

     #+END_SRC

*** History
**** Loadhist

     These library provides functions to exploit the load-history
     system variable. Entry points include `unload-feature',
     `symbol-file', and `feature-file', documented in the
     Emacs Lisp manual.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'loadhist nil t)

      #+END_SRC

*** Search
**** Find-lisp

     This is a very generalized form of find; it basically implements a
     recursive directory descent. The conditions which bound the search
     are expressed as predicates, and I have not addressed the question
     of how to wrap up the common chores that find does in a simpler
     format than writing code for all the various predicates.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'find-lisp nil t)

      #+END_SRC

**** Find-dired

     Run a `find' command and Dired the output.

*** Help
**** Help

     GNU Emacs's built-in help system, the one invoked by
     M-x help-for-help.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'help nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; always select the help window
      (customize-set-variable 'help-window-select nil)

      ;; maximum height of a window displaying a temporary buffer.
      (customize-set-variable 'temp-buffer-max-height
                              (lambda (buffer)
                                (if (and (display-graphic-p) (eq (selected-window) (frame-root-window)))
                                    (/ (x-display-pixel-height) (frame-char-height) 3)
                                  (/ (frame-height) 3))))

      ;; the minimum total height, in lines, of any window
      (customize-set-variable 'window-min-height 4)

      #+END_SRC

***** Display

      #+BEGIN_SRC emacs-lisp

      #+END_SRC

***** Enable

      #+BEGIN_SRC emacs-lisp

      (add-hook 'window-setup-hook
                (lambda ()
                  (funcall 'temp-buffer-resize-mode 1)))

      #+END_SRC

**** Help-fns

     This file contains those help commands which are complicated, and
     which may not be used in every session. For example
     `describe-function' will probably be heavily used when doing elisp
     programming, but not if just editing C files.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'help-fns nil t)

      #+END_SRC

**** Help-mode

     Help-mode, which is the mode used by *Help* buffers, and
     associated support machinery, such as adding hyperlinks, etc...

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'help-mode nil t)

      #+END_SRC

***** Binds

      #+BEGIN_SRC emacs-lisp

      (eval-after-load 'help-mode
        (lambda ()
          (when (boundp 'help-mode-map)
            (define-key help-mode-map (kbd "C-j") 'push-button))))

      ;; help prefix map (C-h) (redundancy)
      (define-key help-map (kbd "C-d") 'describe-symbol)
      (define-key help-map (kbd "C-b") 'describe-bindings)
      (define-key help-map (kbd "C-f") 'describe-function)
      (define-key help-map (kbd "C-v") 'describe-variable)
      (define-key help-map (kbd "C-k") 'describe-key)
      (define-key help-map (kbd "C-r") 'info-display-manual)
      (define-key help-map (kbd "C-m") 'describe-mode)
      (define-key help-map (kbd "C-m") 'describe-mode)
      (define-key help-map (kbd "C-w") 'where-is)
      (define-key help-map (kbd "C-l") 'view-lossage)
      (define-key help-map (kbd "C-e") 'view-echo-area-messages)
      (define-key help-map (kbd "n") 'nil)

      #+END_SRC

*** Docs
**** Info

     The GNU Project distributes most of its manuals in the Info format,
     which you read using an Info reader.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'info nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; non-nil means don’t record intermediate Info nodes to the history
      (customize-set-variable 'Info-history-skip-intermediate-nodes nil)

      ;; list of additional directories to search for (not working)
      (customize-set-variable 'Info-additional-directory-list
                              `(,(expand-file-name "info/" user-emacs-directory)))

      ;; (customize-set-variable 'Info-default-directory-list
      ;;                         `("/usr/local/share/info/"
      ;;                           "/usr/share/info/"
      ;;                           "/usr/local/share/info/"
      ;;                           ,(expand-file-name "info/" user-emacs-directory))

      ;; list of directories to search for Info documentation files (works!)
      (customize-set-variable 'Info-directory-list
                              `("/usr/local/share/emacs/info/"
                                "/usr/local/share/info/"
                                ,(expand-file-name "info/" user-emacs-directory)
                                ,(expand-file-name "info/gdb" user-emacs-directory)))

      ;; 0 -> means do not display breadcrumbs
      (customize-set-variable 'info-breadcrumbs-depth 0)

      #+END_SRC

***** Binds

      #+BEGIN_SRC emacs-lisp

      ;; help-map
      (define-key help-map (kbd "TAB") 'info-display-manual)

      ;; info-mode-map
      (eval-after-load 'info
        (lambda ()
          (when (boundp 'Info-mode-map)
            (define-key Info-mode-map (kbd "C-j") 'Info-follow-nearest-node))))

      #+END_SRC

**** Eldoc

     As you type a function's symbol name as part of a sexp,
     it will print the argument list for that function.
     Behavior is not identical; for example, you need not actually
     type the function name, you need only move point around in a sexp that
     calls it.  Also, if point is over a documented variable, it will print
     the one-line documentation for that variable instead, to remind you of
     that variable's meaning.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'eldoc nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; number of seconds of idle time to wait before printing.
      (customize-set-variable 'eldoc-idle-delay 0.1)

      ;; if value is any non-nil value other than t, symbol name may be truncated
      ;; if it will enable the function arglist or documentation string to fit on a
      ;; single line without resizing window
      (customize-set-variable 'eldoc-echo-area-use-multiline-p t)

      #+END_SRC

***** Enable

      #+BEGIN_SRC emacs-lisp

      ;; enable eldoc globally
      (add-hook 'window-setup-hook
                (lambda()
                  (funcall 'eldoc-mode 1)))

      #+END_SRC

*** Utils
**** Bookmark

     Bookmarks are somewhat like registers in that they record positions
     you can jump to. Unlike registers, they have long names, and they
     persist automatically from one Emacs session to the next.
     The prototypical use of bookmarks is to record where you were
     reading in various files.

     The bookmark list is sorted lexically by default, but you can turn
     this off by setting bookmark-sort-flag to nil. If it is nil, then
     the list will be presented in the order it is recorded
     (chronologically), which is actually fairly useful as well.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'bookmark nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; custom
      ;; file in which to save bookmarks by default.
      (customize-set-variable
       'bookmark-default-file (concat user-emacs-directory "cache/bookmarks"))

      #+END_SRC

**** Registers

     This library provides functions that emulates and somewhat extends the venerable
     TECO's `register' feature, which permits you to save various useful
     pieces of buffer state to named variables. The entry points are
     documented in the Emacs user's manual.

     #+BEGIN_SRC emacs-lisp

     ;; (info "(emacs) Registers")

     #+END_SRC

***** Require
***** Customize
***** Binds

**** Saveplace

     Automatically save place in files, so that visiting them later
     (even during a different Emacs session) automatically moves point
     to the saved position, when the file is first found.  Uses the
     value of buffer-local variable save-place-mode to determine whether to
     save position or not.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'saveplace nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; name of the file that records ‘save-place-alist’ value
      (customize-set-variable 'save-place-file
                              (concat
                               (expand-file-name "cache" user-emacs-directory)
                               "/save-place"))

      ;; non-nil means forget place in unreadable files
      (customize-set-variable 'save-place-forget-unreadable-files t)

      ;; maximum number of entries to retain in the list
      (customize-set-variable 'save-place-limit 256)

      ;; control whether to make numbered backups of master save-place file
      ;; `nospecial' means just use the value of `version-control'
      (customize-set-variable 'save-place-version-control 'nospecial)

      #+END_SRC

***** Hooks
***** Enable

      #+BEGIN_SRC emacs-lisp

      (add-hook 'window-setup-hook
                (lambda ()
                  (safe-funcall 'save-place-mode 1)))

      #+END_SRC

*** Common
**** Font-lock
*** Menu
**** Tmm
***** Require
***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; help text to insert on the top of the completion buffer
      (customize-set-variable 'tmm-completion-prompt "")

      ;; what letters to use as menu shortcuts.
      (customize-set-variable 'tmm-shortcut-style 'upcase)

      #+END_SRC

***** Hooks
*** Mail
** Extensions
*** Loaddefs

    The local ~lisp-loaddefs.el~ was generated by
    =update-directory-autoloads=, using the ~/emacs.d/site-lisp~
    directory, where the packages were installed.

    Update/Generate =autoload= definitions for Lisp files in the directories.
    In an interactive call, you must give one argument, the name of a
    single directory. In a call from Lisp, you can supply multiple
    directories as separate arguments.

    #+BEGIN_SRC emacs-lisp

    ;; generated by `update-directory-autoloads'
    (require 'site-lisp-loaddefs nil t)

    #+END_SRC

**** Lazy-Load

     Automatic generate `autoload' definitions.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'lazy-load nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; non-nil means starts to monitor the directories
      (customize-set-variable 'lazy-load-enable-filenotify-flag t)

      ;; non-nil means show debug messages
      (customize-set-variable 'lazy-load-debug-messages-flag t)

      ;; non-nil means run `lazy-load-update-autoloads' when emacs is idle
      (customize-set-variable 'lazy-load-enable-run-idle-flag nil)

      ;; idle timer value
      (customize-set-variable 'lazy-load-idle-seconds 30)

      ;; interval in seconds, used to trigger the timer callback
      (customize-set-variable 'lazy-load-timer-interval 15)

      ;; target files and directories
      ;; (customize-set-variable 'lazy-load-files-alist
      ;;                         (list
      ;;                          ;; lisp directory
      ;;                          (cons "lisp-loaddefs.el" (expand-file-name "lisp/" user-emacs-directory))
      ;;                          ;; site-lisp directory
      ;;                          (cons "site-lisp-loaddefs.el"
      ;;                                (expand-file-name "site-lisp/" user-emacs-directory))))

      #+END_SRC

***** Enable

      #+BEGIN_SRC emacs-lisp

      (add-hook 'window-setup-hook
                (lambda ()
                  (funcall 'lazy-load-mode 1)))

      #+END_SRC

*** Buffer
**** So-long

     When the lines in a file are so long that performance could suffer to an
     unacceptable degree, we say "so long" to the slow modes and options enabled
     in that buffer, and invoke something much more basic in their
     place.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'global-so-long-mode nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      #+END_SRC

***** Enable

      #+BEGIN_SRC emacs-lisp

      (add-hook 'window-setup-hook
                (lambda ()
                  (funcall 'global-so-long-mode 1)))

      #+END_SRC

**** Iedit

     This package includes Emacs minor modes (iedit-mode and
     iedit-rectangle-mode) based on a API library (iedit-lib) and allows you to edit
     one occurrence of some text in a buffer (possibly narrowed) or region, and
     simultaneously have other occurrences edited in the same way, with visual
     feedback as you type.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'iedit nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; if no-nil, the key is inserted into global-map,
      ;; isearch-mode-map, esc-map and help-map.
      ;; (customize-set-variable 'iedit-toggle-key-default (kbd "C-;"))

      #+END_SRC

***** Binds

      #+BEGIN_SRC emacs-lisp

      ;; bind (iedit-mode-keymap)
      (eval-after-load 'iedit
        (lambda ()
          (when (boundp 'iedit-mode-keymap)
            (define-key iedit-mode-keymap (kbd "M-n") 'iedit-next-occurrence))))

      ;; bind global
      (global-set-key (kbd "C-;") 'iedit-mode)

      #+END_SRC

**** Undo-tree

     Emacs has a powerful undo system. Unlike the standard undo/redo system in
     most software, it allows you to recover *any* past state of a buffer
     (whereas the standard undo/redo system can lose past states as soon as you
     redo). However, this power comes at a price: many people find Emacs' undo
     system confusing and difficult to use, spawning a number of packages that
     replace it with the less powerful but more intuitive undo/redo system.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'undo-tree nil t)

      #+END_SRC

***** Aliases

      #+BEGIN_SRC emacs-lisp

      ;; define alias for redo
      (defalias 'redo 'undo-tree-redo)

      #+END_SRC

***** Binds

      #+BEGIN_SRC emacs-lisp

      (define-key ctl-x-map (kbd "u") 'undo-tree-visualize)

      #+END_SRC

***** Enable

      #+BEGIN_SRC emacs-lisp

      ;; enable
      (add-hook 'window-setup-hook
                (lambda ()
                  (funcall 'global-undo-tree-mode 1)))

      #+END_SRC

**** Browse-kill-ring

     This library provides a buffer kill-ring list for
     searching/insertion and other operations.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'browse-kill-ring nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; non-nil means display duplicate items in `kill-ring' buffer
      (customize-set-variable 'browse-kill-ring-display-duplicates nil)

      ;; non-nil means browse-kill-ring will show a preview of what the
      ;; buffer would look like if the item under point were inserted
      (customize-set-variable 'browse-kill-ring-show-preview nil)

      #+END_SRC

*** CLI

    Command line interface (CLI) is a text-based interface that is
    used to operate software and operating systems while allowing the
    user to respond to visual prompts by typing single commands into
    the interface and receiving a reply in the same way.

**** Shell

     In computing, a shell is a user interface for access to an
     operating system's services.

     This package defines a shell-in-a-buffer (shell mode) built on
     top of comint mode.  This is actually cmushell with things renamed
     to replace its counterpart in Emacs 18.  cmushell is more
     featureful, robust, and uniform than the Emacs 18 version.

     Since this mode is built on top of the general command-interpreter-in-
     a-buffer mode (comint mode), it shares a common base functionality,
     and a common set of bindings, with all modes derived from comint mode.
     This makes these modes easier to use.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'shell nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; regexp to match prompts in the inferior shell
      (customize-set-variable 'shell-prompt-pattern "^[^#$%>\n]*[#$%>] *")
      ;; (customize-set-variable
      ;;  'shell-prompt-pattern
      ;;  "\\(?:^\\|\\)[^]#$%>\n]*#?[]#$%>] *\\(\\[[[:digit:];]*[[:alpha:]] *\\)*")

      ;; if non-nil, the file name to use for explicitly requested inferior shells.
      ;; When nil, such interactive shell sessions fall back to using the
      ;; shell specified in either the environment variable "ESHELL" or
      ;; ‘shell-file-name’
      (customize-set-variable 'explicit-shell-file-name "/bin/csh")

      #+END_SRC

***** Hooks

      #+BEGIN_SRC emacs-lisp

      ;; hook
      (add-hook 'shell-mode-hook
                (lambda()
                  ;; do not display continuation lines.
                  (setq truncate-lines nil)))

      #+END_SRC

**** Eshell

     Despite the sheer fact that running an Emacs shell can be fun, here
     are a few of the unique features offered by Eshell:

     - Integration with the Emacs Lisp programming environment
     - A high degree of configurability.

     - The ability to have the same shell on every system Emacs has been
       ported to. Since Eshell imposes no external requirements, and
       relies upon only the Lisp functions exposed by Emacs, it is quite
       operating system independent. Several of the common UNIX
       commands, such as ls, mv, rm, ln, etc., have been implemented in
       Lisp in order to provide a more consistent work environment.

       - If there is a command on disk, it will be executed
         as in a normal shell.  If there is no command by that name on disk,
         but a Lisp function with that name is defined, the Lisp function
         will be called, using the arguments passed on the command line.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'eshell nil t)

      #+END_SRC

***** Binds

      #+BEGIN_SRC emacs-lisp

      ;; ctl-x-map (C-x)
      (define-key ctl-x-map (kbd "&") 'eshell)

      #+END_SRC

*** Managers
**** Windows (X)

     A window manager is system software that controls the placement
     and appearance of windows within a windowing system in a graphical
     user interface. Most window managers are designed to help provide
     a desktop environment.

     Finally an Emacs window means X11/Xorg WINDOW as well :D!
     Thanks to EXWM! (great library!).

***** Exwm

      EXWM (Emacs X Window Manager) is a full-featured tiling X window manager
      for Emacs built on top of XELB.

****** Require

       #+BEGIN_SRC emacs-lisp

       (require 'exwm nil t)

       #+END_SRC

****** Customize

       #+BEGIN_SRC emacs-lisp

       ;; show workspaces in all buffers
       (customize-set-variable 'exwm-workspace-show-all-buffers nil)

       ;; non-nil to allow switching to buffers on other workspaces
       (customize-set-variable 'exwm-layout-show-all-buffers nil)

       ;; non-nil to force managing all X windows in tiling layout.
       (customize-set-variable 'exwm-manage-force-tiling t)

       ;; exwn global keybindings
       (customize-set-variable 'exwm-input-global-keys
                               `((,(kbd "s-q") . exwm-input-toggle-keyboard)
                                 (,(kbd "s-<f6>") . mute-audio)
                                 (,(kbd "s-<f7>") . lower-volume)
                                 (,(kbd "s-<f8>") . raise-volume)))

       ;; The following example demonstrates how to use simulation keys to mimic
       ;; the behavior of Emacs.  The value of `exwm-input-simulation-keys` is a
       ;; list of cons cells (SRC . DEST), where SRC is the key sequence you press
       ;; and DEST is what EXWM actually sends to application.  Note that both SRC
       ;; and DEST should be key sequences (vector or string).
       (customize-set-variable 'exwm-input-simulation-keys
                               '(
                                 ;; movement
                                 ([?\C-p] . [up])
                                 ([?\C-b] . [left])
                                 ([?\C-f] . [right])
                                 ([?\C-n] . [down])
                                 ([?\M-b] . [C-left])
                                 ([?\M-f] . [C-right])
                                 ([?\C-e] . [end])
                                 ([?\C-v] . [next])
                                 ([?\C-a] . [home])
                                 ([?\M-v] . [prior])
                                 ([?\C-d] . [delete])
                                 ([?\C-k] . [S-end delete])

                                 ;; browser temporary
                                 ([?\C-o] . [C-prior]) ; change tab mapping
                                 ([?\C-k] . [C-w]) ; close tab mapping
                                 ([?\C-j] . [return]) ; close tab mapping

                                 ;; cut/paste.
                                 ([?\C-w] . [?\C-x])
                                 ([?\M-w] . [?\C-c])
                                 ([?\C-y] . [?\C-v])

                                 ;; Escape (cancel)
                                 ([?\C-g] . [escape])

                                 ;; search
                                 ([?\C-s] . [?\C-f])))

       #+END_SRC

****** Functions

       #+BEGIN_SRC emacs-lisp

       (defvar vlm-exwm-current-workspace 0
         "Current workspace cache.")

       (defun vlm-exwm-other-workspace ()
         "Switch to other workspace."
         (interactive)
         (safe-funcall 'exwm-workspace-switch
                       (setq vlm-exwm-current-workspace
                             (if (= vlm-exwm-current-workspace 0) 1 0))))

       #+END_SRC

****** Binds

       #+BEGIN_SRC emacs-lisp

       ;; this little bit will make sure that XF86 keys work in exwm buffers as well
       (if (boundp 'exwm-input-prefix-keys)
           (progn
             (dolist (key '(XF86AudioLowerVolume
                            XF86AudioRaiseVolume
                            XF86PowerOff
                            XF86AudioMute
                            XF86AudioPlay
                            XF86AudioStop
                            XF86AudioPrev
                            XF86AudioNext
                            XF86ScreenSaver
                            XF68Back
                            XF86Forward
                            Scroll_Lock
                            print))
               (cl-pushnew key exwm-input-prefix-keys))))

       ;; workspace binds
       (define-key vlm-window-map (kbd "o") 'vlm-exwm-other-workspace)

       #+END_SRC

****** Hooks

       #+BEGIN_SRC emacs-lisp

       ;; All buffers created in EXWM mode are named "*EXWM*". You may want to
       ;; change it in `exwm-update-class-hook' and `exwm-update-title-hook', which
       ;; are run when a new X window class name or title is available.  Here's
       ;; some advice on this topic:
       ;; + Always use `exwm-workspace-rename-buffer` to avoid naming conflict.
       ;; + For applications with multiple windows (e.g. GIMP), the class names of
       ;; all windows are probably the same.  Using window titles for them makes
       ;; more sense.

       ;; update the buffer name by X11 window title
       (add-hook 'exwm-update-title-hook
                 (lambda ()
                   (when (and (fboundp 'exwm-workspace-rename-buffer)
                              (boundp 'exwm-class-name)
                              (boundp 'exwm-title))
                     (exwm-workspace-rename-buffer
                      (truncate-string-to-width
                       (concat exwm-class-name "|" exwm-title) 32)))))

       #+END_SRC

****** Enable

       #+BEGIN_SRC emacs-lisp

       #+END_SRC

***** Exwm-randr

      This module adds Randr support for EXWM.
      Currently it requires external tools such as xrandr(1)
      to properly configure Randr first.

****** Require

       #+BEGIN_SRC emacs-lisp

       (require 'exwm-randr nil t)

       #+END_SRC

****** Customize

       #+BEGIN_SRC emacs-lisp

       ;; plist mapping workspaces to monitors
       (customize-set-variable 'exwm-randr-workspace-monitor-plist
                               '(0 "HDMI-A-0"  1 "DisplayPort-0"))

       ;; initial number of workspaces
       (customize-set-variable 'exwm-workspace-number
                               (if (boundp 'exwm-randr-workspace-monitor-plist)
                                   (/ (safe-length exwm-randr-workspace-monitor-plist) 2)
                                 1))

       #+END_SRC

****** Functions

       #+BEGIN_SRC emacs-lisp

       (defun vlm-xrandr-screen-layout ()
         "Apply screen layout using xrandr(1)."
         (interactive)
         (start-process-shell-command
          "xrandr" nil
          (mapconcat (lambda (x) x) '("xrandr"
                                      "--output DisplayPort-0"
                                      "--mode 1920x1080"
                                      "--pos 1920x0"
                                      "--rotate left"
                                      "--right-of HDMI-A-0"
                                      "--output HDMI-A-0"
                                      "--primary"
                                      "--mode 1920x1080"
                                      "--pos 0x0"
                                      "--rotate normal"
                                      "--output DVI-D-0"
                                      "--off")
                     " ")))

       #+END_SRC

****** Hooks

       #+BEGIN_SRC emacs-lisp

       (add-hook 'exwm-randr-screen-change-hook 'vlm-xrandr-screen-layout)

       #+END_SRC

****** Enable

       #+BEGIN_SRC emacs-lisp

       (exwm-randr-enable)
       (exwm-enable)

       #+END_SRC

**** Packages

     A package manager or package-management system is a collection of
     software tools that automates the process of installing,
     upgrading, configuring, and removing computer programs for a
     computer's system environment (like EMACS) in a consistent manner.

***** Packages

      The idea behind package.el is to be able to download packages
      and install them. Packages are versioned and have versioned
      dependencies.

****** Require


       #+BEGIN_SRC emacs-lisp

       ;; (require 'package nil t)

       #+END_SRC

**** Files

     A file manager or file browser is a computer program that provides
     a user interface to manage files and folders.

*** Emulators

    An emulator is hardware or software that enables one
    computer system (called the host) to behave like another computer
    system (called the guest).

    An emulator typically enables the host system to run software
    or use peripheral devices designed for the guest system.

**** Terminal

     A terminal emulator, terminal application, or term
     is a computer program that emulates a video terminal within
     some other display architecture.

***** Term

      Command-interpreter-in-a-buffer package (term mode).
      The idea is that you can build specific process-in-a-buffer
      modes on top of term mode -- e.g., lisp, shell, scheme, T, soar, ...

      It seems that ~sh~ shell works better with term.

****** Require

       #+BEGIN_SRC emacs-lisp

       ;; (require 'term nil t)

       #+END_SRC

****** Customize

       #+BEGIN_SRC emacs-lisp

       ;; if non-nil, is file name to use for explicitly
       ;; requested inferior shell
       ;; (customize-set-variable 'explicit-shell-file-name (getenv "SHELL"))

       ;; if non-nil, add a ‘/’ to completed directories
       (customize-set-variable 'term-completion-addsuffix t)

       ;; regexp to recognize prompts in the inferior process
       (customize-set-variable 'term-prompt-regexp "^[^#$%>\n]*[#$%>] *")

       ;; if non-nil, automatically list possibilities on partial completion.
       (customize-set-variable 'term-completion-autolist t)

       ;; if true, buffer name equals process name
       (customize-set-variable 'term-ansi-buffer-base-name t)

       #+END_SRC

****** Hooks

       #+BEGIN_SRC emacs-lisp

       (add-hook 'term-mode-hook
                 (lambda()
                   ;; do not display continuation lines.
                   (setq truncate-lines t)
                   ;; make global line disappear
                   (setq-local global-hl-line-mode nil)
                   ;; setup keybinds
                   (safe-funcall 'term-setup-keystroke)))

       ;; temporary
       ;; (add-hook 'term-mode-hook
       ;;           (lambda ()
       ;;             (setq-local global-hl-line-mode nil)))

       ;; bind term-raw-map/term-mode-map with hook
       (add-hook 'term-mode-hook
                 (lambda ()
                   (when (and (boundp 'term-raw-map)
                              (boundp 'term-mode-map))
                     ;; term-raw-map
                     (define-key term-raw-map (kbd "s-q") 'term-line-mode)
                     ;; term-mode-map
                     (define-key term-mode-map (kbd "s-q") 'term-char-mode))))

       ;; hook run after the term buffer is killed (not working)
       ;; (add-hook 'kill-buffer-hook 'term-kill-buffer-hook)

       #+END_SRC

****** Binds

       #+BEGIN_SRC emacs-lisp

       ;; clt-x-map (C-x) prefix
       (define-key ctl-x-map (kbd "<C-return>") 'term-make)

       #+END_SRC

***** Multi-Term
****** Require
****** Customize

       #+BEGIN_SRC emacs-lisp

       (customize-set-variable 'multi-term-dedicated-select-after-open-p t)

       #+END_SRC

****** Binds

       #+BEGIN_SRC emacs-lisp

       (define-key ctl-x-map (kbd "x") 'multi-term-dedicated-toggle)

       #+END_SRC

*** Security
**** Auth-source

     It lets users tell Gnus how to authenticate in a single place.
     Simplicity is the goal. Instead of providing 5000 options,
     we'll stick to simple, easy to understand options.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'auth-source nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; Note: If the auth-sources variable contains ~/.auth.gpg before
      ;; ~/.auth, the auth-source library will try to read the GnuPG
      ;; encrypted .gpg file first, before the unencrypted file.

      ;; list of authentication sources
      (customize-set-variable
       'auth-sources '("~/.auth/auth.gpg" "~/.auth/netrc"))

      #+END_SRC

*** Session
**** Desktop

     This library provides ways to save the state of Emacs from one session to
     another. Once you save the Emacs “desktop”—the buffers, their file
     names, major modes, buffer positions, and so on—then subsequent Emacs
     sessions reload the saved desktop.

     By default, the desktop also tries to save the frame and window configuration.
     When the desktop restores the frame and window configuration, it uses
     the recorded values of frame parameters, disregarding any settings for
     those parameters you have in your ~init~ file.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'desktop nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; list of directories to search for the desktop file
      (customize-set-variable 'desktop-path
                              `(,(expand-file-name "cache" user-emacs-directory)))

      ;; specifies whether the desktop should be saved when it is killed
      (customize-set-variable 'desktop-save 'ask)

      ;; TODO:
      ;; Its value is (tags-table-mode)
      ;; desktop-modes-not-to-save
      ;; List of major modes whose buffers should not be saved.

      ;; if t, restoring frames reuses existing frames
      (customize-set-variable 'desktop-restore-frames nil)

      ;; if t: restoring frames reuses existing frames,
      ;; if nil: deletes existing frames,
      ;; if keep: keeps existing frames and does not reuse them
      (customize-set-variable 'desktop-restore-reuses-frames t)

      ;; if all, also restores frames that are partially offscreen onscreen
      (customize-set-variable 'desktop-restore-forces-onscreen 'all)

      ;; if nil, restores frames into their original displays (if possible)
      (customize-set-variable 'desktop-restore-in-current-display nil)

      ;; Idle delay before starting to create buffers
      (customize-set-variable 'desktop-lazy-idle-delay 4)

      ;; number of buffers to restore immediately (max),
      ;; remaining buffers are restored lazily
      (customize-set-variable 'desktop-restore-eager 16)

      ;; when non-nil, save buffer status in desktop file
      (customize-set-variable 'desktop-save-buffer t)

      ;; number of seconds of idle time before auto-saving the desktop
      (customize-set-variable 'desktop-auto-save-time 16)

      #+END_SRC

***** Hooks

      #+BEGIN_SRC emacs-lisp

      (add-hook 'desktop-after-read-hook
                (lambda ()
                  (safe-funcall 'tabs-create-default-tabs)
                  (safe-funcall 'tab-update-switch-binds)))

      ;; save desktop before kill emacs
      (add-hook 'kill-emacs-hook #'desktop-save-in-desktop-dir)

      #+END_SRC

***** Enable

      #+BEGIN_SRC emacs-lisp

      (add-hook 'window-setup-hook
                (lambda ()
                  (funcall 'desktop-save-mode 1)))

      #+END_SRC

*** Clocks
**** Time

     Facilities to display current time/date and a new-mail indicator
     in the Emacs mode line.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'time nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; seconds between updates of time in the mode line.
      (customize-set-variable 'display-time-interval 15)

      ;; non-nil indicates time should be displayed as hh:mm, 0 <= hh <= 23
      (customize-set-variable 'display-time-24hr-format t)

      ;; set format time string
      (customize-set-variable 'display-time-format "%H:%M")

      ;; load-average values below this value won’t be shown in the mode line.
      (customize-set-variable 'display-time-load-average-threshold 1.0)

      #+END_SRC

***** Enable

      #+BEGIN_SRC emacs-lisp

      ;; (safe-funcall 'display-time-mode 0)

      #+END_SRC

*** Apparence
**** Icons
***** All-the-icons

      This package is a utility for using and formatting various Icon
      fonts within Emacs.  Icon Fonts allow you to propertize and format
      icons the same way you would normal text. This enables things such
      as better scaling of and anti aliasing of the icons.

****** Require

       #+BEGIN_SRC emacs-lisp

       ;; (require 'all-the-icons nil t)

       #+END_SRC

****** Customize

       #+BEGIN_SRC emacs-lisp

       ;; whether or not to include a foreground colour when formatting the icon
       (customize-set-variable 'all-the-icons-color-icons nil)

       ;; the default adjustment to be made to the `raise' display property of an icon
       (customize-set-variable 'all-the-icons-default-adjust -0.3)

       ;; the base Scale Factor for the `height' face property of an icon
       (customize-set-variable 'all-the-icons-scale-factor 1.1)

       #+END_SRC

**** Themes
***** Moebius

      Add theme directory to load-path and load the
      default theme.

****** Add

       #+BEGIN_SRC emacs-lisp

       ;; add vlm-theme-dir to theme load path
       (add-to-list 'custom-theme-load-path (concat user-emacs-directory "themes"))

       ;; add borland-blue-theme path
       (add-to-list 'custom-theme-load-path
                    (expand-file-name "themes/borland-blue-theme"
                                      user-emacs-directory))

       #+END_SRC

****** Enable

       #+BEGIN_SRC emacs-lisp :tangle yes

       ;; load theme
       (add-hook 'window-setup-hook
                 (lambda ()
                   (funcall 'load-theme 'borland-blue t)))

       #+END_SRC

*** Buffers
**** Buffer-move

     Swap windows/buffer position (layout).

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'buffer-move nil t)

      #+END_SRC

***** Binds

      #+BEGIN_SRC emacs-lisp

      ;; (define-key ctl-x-map (kbd "<C-up>") 'buf-move-up)
      ;; (define-key ctl-x-map (kbd "<C-down>") 'buf-move-down)
      ;; (define-key ctl-x-map (kbd "<C-left>") 'buf-move-left)
      ;; (define-key ctl-x-map (kbd "<C-right>")'buf-move-right)

      #+END_SRC

**** Ibuffer

     A major mode for viewing a list of buffers.
     In Ibuffer, you can conveniently perform many operations on the
     currently open buffers, in addition to filtering your view to a
     particular subset of them, and sorting by various criteria.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'ibuffer nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; the criteria by which to sort the buffers
      (customize-set-variable 'ibuffer-default-sorting-mode 'filename/process)

      ;; if non-nil, display the current Ibuffer buffer itself
      (customize-set-variable 'ibuffer-view-ibuffer nil)

      ;; if non-nil, always display the previous buffer
      (customize-set-variable 'ibuffer-always-show-last-buffer t)

      ;; if non-nil, then show the names of filter groups which are empty
      (customize-set-variable 'ibuffer-show-empty-filter-groups nil)

      ;; an alist of filtering groups to switch between.
      (customize-set-variable
       'ibuffer-saved-filter-groups
       (quote (("default"
                ("Emacs" (or
                          (name . "^\\*eldoc for")
                          (name . "^\\*scratch\\*$")
                          (name . "^\\*Warnings\\*$")
                          (name . "^\\*Completions\\*$")
                          (name . "^\\*Completions\\*$")
                          (name . "^\\*Messages\\*$")))
                ("Comint" (or
                           (mode . comint-mode)
                           (name . "^\\*Async Shell Command\\*$")
                           (name . "^\\*dashboard\\*$")
                           (name . "^\\*tramp")
                           (name . "^\\*make\\*$")))
                ("Misc"    (mode . fundamental-mode))
                ("Custom" (mode . Custom-mode))
                ("IRC" (mode . rcirc-mode))
                ("Info"  (or
                          (mode . Info-mode)
                          (mode . dictionary-mode)
                          (mode . help-mode)
                          (mode . apropos-mode)
                          (mode . Man-mode)))
                ("Tags" (or
                         (mode . tags-table-mode)
                         (mode . xref--xref-buffer-mode)))
                ("Compilation" (or
                                (mode . compilation-mode)
                                (mode . emacs-lisp-compilation-mode)
                                (name . "^\\*compilation\\*$")))
                ("Debug"  (or (mode . debugger-mode)
                              (name . "^\\*debug")))
                ("Flymake" (name . "^\\*Flymake"))
                ("Magit" (name . "^magit.*:"))
                ("Grep" (or
                         (mode . ag-mode)
                         (mode . occur-mode)
                         (mode . locate-mode)))
                ("Kill Ring" (mode . browse-kill-ring-mode))
                ("Term" (mode . term-mode))
                ("Shell" (or
                          (mode . shell-mode)
                          (mode . eshell-mode)))
                ("Exwm" (mode . exwm-mode))
                ("Emms" (or
                         (mode . emms-playlist-mode)
                         (name . "^\\*EMMS-LOG\\*$")))
                ("Eww" (mode . eww-mode))
                ("Dired" (mode . dired-mode))
                ("Gnus" (or
                         (mode . message-mode)
                         (mode . bbdb-mode)
                         (mode . mail-mode)
                         (mode . gnus-group-mode)
                         (mode . gnus-server-mode)
                         (mode . gnus-summary-mode)
                         (mode . gnus-article-mode)
                         (mode . gnus-browse-mode)
                         (name . "^\\.bbdb$")
                         (name . "^\\.newsrc-dribble")))
                ("Org" (or
                        (mode . org-agenda-mode)
                        (name . "^\\*Calendar\\*$")
                        (name . "^diary*")
                        (name . "^bookmark.org$")
                        (name . "^TODO*")
                        (name . "^agenda*")
                        (mode . muse-mode)))
                ("Ibuffer" (mode . ibuffer-mode))
                ("Command History" (mode . command-history-mode))
                ("Tex" (or (mode . tex-shell)
                           (mode . latex-mode)))
                ("Imenu" (name . "^\*Ilist\*"))
                ("VLM"  (name . "^vlm.org$"))))))

      #+END_SRC

***** Hooks

      #+BEGIN_SRC emacs-lisp

      ;; hook run upon entry into `ibuffer-mode'
      (add-hook 'ibuffer-mode-hook
                (lambda ()
                  (safe-funcall 'ibuffer-auto-mode 1)
                  (safe-funcall 'ibuffer-switch-to-saved-filter-groups "default")
                  (safe-funcall 'ibuffer-jump-to-filter-group "Default")))

      #+END_SRC

***** Binds

      #+BEGIN_SRC emacs-lisp

      (define-key ctl-x-map (kbd "b") 'ibuffer)

      #+END_SRC

***** Aliases

      #+BEGIN_SRC emacs-lisp

      (defalias 'list-buffers 'ibuffer)

      #+END_SRC

*** Completions
**** Dabbrev

     The purpose with this package is to let you write just a few
     characters of words you've written earlier to be able to expand
     them.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'dabbrev nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; non-nil means case sensitive search.
      (customize-set-variable 'dabbrev-upcase-means-case-search t)

      ;; whether dabbrev treats expansions as the same if they differ in case
      ;; a value of nil means treat them as different.
      (customize-set-variable 'dabbrev-case-distinction t)

      #+END_SRC

**** Hippie-exp
***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'hippie-exp nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; the list of expansion functions tried in order by `hippie-expand'
      ;; try-expand-all-abbrevs: todo research
      (customize-set-variable 'hippie-expand-try-functions-list
                              '(try-expand-list
                                try-expand-dabbrev
                                try-expand-dabbrev-all-buffers
                                try-expand-dabbrev-from-kill
                                try-expand-line
                                try-complete-lisp-symbol-partially
                                try-complete-lisp-symbol
                                try-complete-file-name-partially
                                try-complete-file-name))

      #+END_SRC


***** Binds

      #+BEGIN_SRC emacs-lisp

      (global-set-key (kbd "M-[") 'hippie-expand)

      #+END_SRC

**** Yasnippet

     YASnippet is a template system for Emacs. It allows you to type an
     abbreviation and automatically expand it into
     function templates. Bundled language templates include:
     C, C++, C#, Perl, Python, Ruby, SQL, LaTeX, HTML, CSS and more.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'yasnippet nil t)

      #+END_SRC

***** Binds

      #+BEGIN_SRC emacs-lisp

      ;; binds vlm-completion-map
      (define-key vlm-completion-map (kbd "e") 'yas-expand)
      (define-key vlm-completion-map (kbd "i") 'yas-insert-snippet)
      (define-key vlm-completion-map (kbd "v") 'yas-visit-snippet-file)

      ;; binds yas-keymap
      (eval-after-load 'yasnippet
        (lambda ()
          (when (boundp 'yas-keymap)
            (define-key yas-keymap (kbd "TAB") nil)
            (define-key yas-keymap (kbd "<tab>") nil)
            (define-key yas-keymap (kbd "M-TAB") 'yas-next-field))

          ;; unbind: clean minor mode map alist
          (setq minor-mode-map-alist nil)))

      #+END_SRC

***** Enable

      #+BEGIN_SRC emacs-lisp

      ;; enable yasnippet after emacs startup
      (add-hook 'window-setup-hook
                (lambda ()
                  (funcall 'yas-global-mode 1)))

      #+END_SRC

**** Ace

     Auto-complete and expand (Package under construction).

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'ace nil t)

      #+END_SRC

***** Customize
***** Binds

      #+BEGIN_SRC emacs-lisp

      ;; vlm-completion-map
      ;; (define-key vlm-completion-map (kbd "`") 'ace-completion-word-at-point)
      ;; (define-key vlm-completion-map (kbd "f") 'ace-completion-file-name-at-point)
      (define-key vlm-completion-map (kbd "<tab>") 'ace-completion-at-point)
      (define-key vlm-completion-map (kbd "a")     'completion-at-point)

      ;; global map
      (global-set-key (kbd "M-<tab>") 'ace-completion-at-point-or-indent)
      (global-set-key (kbd "TAB") 'ace-completion-at-point-or-indent)

      #+END_SRC

***** Enable

      #+BEGIN_SRC emacs-lisp

      ;; enable ace-mode
      (add-hook 'window-setup-hook
                (lambda ()
                  (funcall 'turn-on-ace-mode)))

      #+END_SRC

**** Srecode
**** Autotype
*** Graphics
**** Artist

     Artist is an Emacs lisp package that allows you to draw lines,
     rectangles and ellipses by using your mouse and/or keyboard.  The
     shapes are made up with the ascii characters |, -, / and \.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'artist nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; whether or not to incrementally update display when flood-filling
      (customize-set-variable 'artist-flood-fill-show-incrementally nil)

      ;; whether or not to remove white-space at end of lines
      (customize-set-variable 'artist-trim-line-endings nil)

      #+END_SRC

*** Readers
**** Email
***** Messages

      This mode provides mail-sending facilities from within Emacs.  It
      consists mainly of large chunks of code from the sendmail.el,
      gnus-msg.el and rnewspost.el files.

****** Require

       #+BEGIN_SRC emacs-lisp

       ;; (require 'message nil t)

       #+END_SRC

****** Customize

       #+BEGIN_SRC emacs-lisp

       ;; your preference for a mail composition package
       (customize-set-variable 'mail-user-agent 'message-user-agent)
       ;; (customize-set-variable 'mail-user-agent 'gnus-user-agent)

       ;; if non-nil, `compose-mail' warns about changes in `mail-user-agent'
       (customize-set-variable 'compose-mail-user-agent-warnings nil)

       ;; if it is nil, use Gnus; else use `mail-user-agent'
       (customize-set-variable 'message-mail-user-agent t)

       ;; string to be inserted at the end of the message buffer
       (customize-set-variable 'message-signature "")

       ;; format of the "whomever writes:" line
       (customize-set-variable 'message-citation-line-format "%f [%Y-%m-%d, %R %z]:\n")

       ;; function called to insert the "whomever writes:" line
       (customize-set-variable 'message-citation-line-function
                               'message-insert-formatted-citation-line)
       ;; function that inserts a formatted citation line

       ;; when non-nil, ask for confirmation when sending a message
       (customize-set-variable 'message-confirm-send t)

       ;; non-nil means that the message buffer will be killed after sending a message
       (customize-set-variable 'message-kill-buffer-on-exit t)

       ;; whether to confirm a wide reply to multiple email recipients
       (customize-set-variable 'message-wide-reply-confirm-recipients t)

       ;; this variable is obsolete since 26.1;
       ;; the default charset comes from the language environment
       ;; default charset used in non-MULE Emacsen
       (customize-set-variable 'message-default-charset 'utf-8)

       ;; directory from which all other mail file variables are derived
       (customize-set-variable 'message-directory "~/mail")

       #+END_SRC

****** Hooks

       #+BEGIN_SRC emacs-lisp

       ;; normal hook, run each time a new outgoing message is initialized
       (add-hook 'message-setup-hook 'message-sort-headers)

       #+END_SRC

**** Elfeed

     Elfeed is a web feed client for Emacs, inspired by notmuch.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'elfeed nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; directory where elfeed will store its database
      (customize-set-variable 'elfeed-db-directory
                              (expand-file-name "elfeed" user-emacs-directory))

      ;; default directory for saving enclosures
      (customize-set-variable 'elfeed-enclosure-default-dir
                              (expand-file-name "cache/elfeed" user-emacs-directory))

      #+END_SRC

**** Nnimap

     Nnimap library provides interfaces Gnus with IMAP servers.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'nnimap nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; limit the number of articles to look for after moving an article
      (customize-set-variable 'nnimap-request-articles-find-limit nil)

      #+END_SRC

**** Mail-source

     The mail-fetching library.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'mail-source nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; where the mail backends will look for incoming mail
      (customize-set-variable 'mail-sources
                              '((maildir :path "~/.nmaildir" :subdirs ("cur" "new"))))

      ;; file where mail will be stored while processing it
      ;; (customize-set-variable 'mail-source-crash-box
      ;;                         (expand-file-name
      ;;                          ".emacs-mail-crash-box"
      ;;                          (symbol-value 'mail-source-directory)))

      ;; if non-nil, delete incoming files after handling.
      ;; if t, delete immediately, if nil, never delete.  If a positive number, delete
      ;; files older than number of days.
      (customize-set-variable 'mail-source-delete-incoming nil)

      #+END_SRC

**** Nnmail

     These variables are (for the most part) pertinent to all the various
     mail back ends.

     #+BEGIN_SRC emacs-lisp

     ;; the file name of the nnmail Message-ID cache
     (customize-set-variable 'nnmail-message-id-cache-file
                             (expand-file-name "cache/.nnmail-cache"
                                               user-emacs-directory))

     #+END_SRC

**** Gnus

     - News: This is what you are supposed to use this thing for—reading news.
       News is generally fetched from a nearby NNTP server, and is
       generally publicly available to everybody.

     - Mail: Everything that’s delivered to you personally is mail. Some
       news/mail readers (like Gnus) blur the distinction between mail
       and news, but there is a difference.
       Mail is private. News is public.
       Mailing is not posting, and replying is not following up.

     - Reply: Send a mail to the person who has written what you are
       reading.

       The Gnus Newsreader:

       You can read news (and mail) from within Emacs by using Gnus.
       The news can be gotten by any means: NNTP, local spool or
       your box file.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'gnus nil t)

      #+END_SRC

***** Customize
****** Gnus

       #+BEGIN_SRC emacs-lisp

       ;; directory variable from which all other Gnus file variables are derived
       (customize-set-variable 'gnus-directory (expand-file-name "~/news/"))

       ;; default method for selecting a newsgroup
       ;; nnnil is a Gnus backend that provides no groups or articles.  It's useful
       ;; as a primary select method when you want all your real select methods to
       ;; be secondary or foreign.
       (customize-set-variable 'gnus-select-method '(nnnil))

       ;; a list of secondary methods that will be used for reading news
       ;; '((nnml "")))
       (customize-set-variable 'gnus-secondary-select-methods
                               '(
                                 ;; (nntp "news.gwene.org")
                                 ;; (nntp "news.grc.com")
                                 ;; (nntp "news.tilde.club")
                                 ;; (nntp "retrobsd.ddns.net")
                                 (nnmaildir "" (directory "~/.nnmaildir"))))

       ;; if non-nil, automatically mark Gcc articles as read
       (customize-set-variable 'gnus-gcc-mark-as-read nil)

       ;; if non-nil, the startup message will not be displayed
       (customize-set-variable 'gnus-inhibit-startup-message nil)

       ;; whether we want to use the Gnus agent or not
       (customize-set-variable 'gnus-agent nil)

       ;; non-nil means that you are a usenet novice
       (customize-set-variable 'gnus-novice-user nil)

       ;; non-nil means that Gnus will run `gnus-find-new-newsgroups' at startup
       (customize-set-variable 'gnus-check-new-newsgroups 'ask-server)

       ;; unconditionally read the dribble file
       (customize-set-variable 'gnus-always-read-dribble-file t)

       ;; non-nil means that Gnus will read the entire active file at startup
       (customize-set-variable 'gnus-read-active-file 'some)

       ;; if non-nil, use the entire emacs screen
       (customize-set-variable 'gnus-use-full-window nil)

       ;; if non-nil, require your confirmation when catching up a group
       (customize-set-variable 'gnus-interactive-catchup nil)

       ;; if non-nil, require your confirmation when exiting gnus
       (customize-set-variable 'gnus-interactive-exit nil)

       ;; if non-nil, use the entire Emacs screen
       (customize-set-variable 'gnus-use-full-window nil)

       #+END_SRC

****** Groups

       #+BEGIN_SRC emacs-lisp

       ;; format of group lines
       ;; (customize-set-variable 'gnus-group-line-format "%M%S%p%P%-12,12y: %B%(%G%)%l\n")
       (customize-set-variable 'gnus-group-line-format "%M%S%p%P%5y:%B%(%g%)\n")

       ;; non-nil means that Gnus will check and remove bogus newsgroup at startup
       (customize-set-variable 'gnus-check-bogus-newsgroups t)

       ;; non-nil means that Gnus will run `gnus-find-new-newsgroups' at startup
       (customize-set-variable 'gnus-check-new-newsgroups 'ask-server)

       ;; revise this
       ;; (setq gnus-message-archive-group '((format-time-string "sent.%Y-%m")))

       #+END_SRC

****** Summary

       #+BEGIN_SRC emacs-lisp

       ;; if non-nil, display an arrow highlighting the current article
       (customize-set-variable 'gnus-summary-display-arrow t)

       ;; if non-nil, ignore articles with identical Message-ID headers
       (customize-set-variable 'gnus-summary-ignore-duplicates t)

       ;; the format specification of the lines in the summary buffer.
       (customize-set-variable 'gnus-summary-line-format
                               " %U %R %d %-5,5L %-12,12n %B%-80,80S\n")

       ;; specifies date format depending on age of article
       (customize-set-variable
        'gnus-user-date-format-alist '((t . "%Y-%m-%d %H:%M")))

       ;; function used for gathering loose threads.
       (customize-set-variable
        'gnus-summary-thread-gathering-function
        'gnus-gather-threads-by-references)

       ;; list of functions used for sorting threads in the summary buffer
       ;; by default, threads are sorted by article number
       (customize-set-variable 'gnus-thread-sort-functions
                               '(gnus-thread-sort-by-date
                                 gnus-thread-sort-by-number))

       ;; thread formats
       (customize-set-variable 'gnus-summary-make-false-root 'dummy)
       (customize-set-variable 'gnus-sum-thread-tree-false-root      "  ┈─► ")
       (customize-set-variable 'gnus-sum-thread-tree-single-indent   "  » ")
       (customize-set-variable 'gnus-sum-thread-tree-root            "  ● ")
       (customize-set-variable 'gnus-sum-thread-tree-vertical        "  │   ")
       (customize-set-variable 'gnus-sum-thread-tree-leaf-with-other "  ├─► ")
       (customize-set-variable 'gnus-sum-thread-tree-single-leaf     "  ╰─► ")
       (customize-set-variable 'gnus-sum-thread-tree-indent          "  ")

       ;; display smileys/fill long lines/fill article
       (customize-set-variable 'gnus-treat-display-smileys nil)
       (customize-set-variable 'gnus-treat-fill-long-lines nil)
       (customize-set-variable 'gnus-treat-fill-article nil)

       #+END_SRC

****** Articles

       #+BEGIN_SRC emacs-lisp

       ;; non-nil means inhibit displaying of images inline in the article body
       (customize-set-variable 'gnus-inhibit-images t)

       ;; value of ‘truncate-lines’ in Gnus Article buffer
       (customize-set-variable 'gnus-article-truncate-lines t)

       ;; if non-nil, allow scrolling the article buffer even when there no more text
       (customize-set-variable 'gnus-article-show-cursor t)

       ;; if non-nil, display all articles in the same buffer.
       (customize-set-variable 'gnus-single-article-buffer t)

       ;; if nil, don’t delete temporary files
       ;; if it is t, delete them on exit from the summary buffer
       ;; if it is the symbol ‘file’, query on each file, if it is ‘ask’ ask once when
       ;; exiting from the summary buffer.
       (customize-set-variable 'gnus-article-browse-delete-temp t)

       #+END_SRC

***** Hooks

      #+BEGIN_SRC emacs-lisp

      ;; goto topics
      (add-hook 'gnus-group-mode-hook 'gnus-topic-mode)

      ;; set timestamp
      (add-hook 'gnus-select-group-hook 'gnus-group-set-timestamp)

      #+END_SRC

***** Binds

      #+BEGIN_SRC emacs-lisp

      (eval-after-load 'gnus-group-mode
        (lambda ()
          (when (boundp 'gnus-group-mode-map)
            (define-key gnus-group-mode-map (kbd "TAB") 'gnus-group-select-group))))

      #+END_SRC

*** Media
**** Emms

     Emms is the Emacs Multi-Media System. It tries to be a clean and small
     application to play multimedia files from Emacs using external
     players. The basic functionality of Emms consists of three parts:
     The core, the sources, and the players.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'emms nil t)
      ;; (require 'emms-setup nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; string used for displaying the current track in mode-line and titlebar
      (customize-set-variable 'emms-mode-line-format "")

      ;; list of players that EMMS can use
      (customize-set-variable 'emms-player-list '(emms-player-mpv))

      ;; default list of players for emms-setup
      (customize-set-variable 'emms-setup-default-player-list '(emms-player-mpv))

      ;;  the default name of the EMMS playlist buffer
      (customize-set-variable 'emms-playlist-buffer-name "*playlist*")

      ;; if this is nil, existing playlists will be quietly overwritten
      (customize-set-variable ' emms-source-playlist-ask-before-overwrite nil)

      ;; the default directory to look for media files.
      (customize-set-variable
       'emms-source-file-default-directory (expand-file-name "~/media/music/"))

      #+END_SRC

***** Binds

      Sometimes it's better to put binds under
      some hook - `emms-playlist-mode-hook' umbrella.

      #+BEGIN_SRC emacs-lisp

      ;; binds emms-playlis-mode-map
      (eval-after-load 'emms-playlist-mode
        (lambda ()
          ;; avoid warnings
          (and (boundp 'emms-playlist-mode-map)
               ;; add files inside playlist mode buffer
               (define-key emms-playlist-mode-map (kbd "A") 'emms-add-file))))

      ;; vlm-media-map default
      (define-key vlm-media-map (kbd "P") 'play-playlist)
      (define-key vlm-media-map (kbd "a") 'emms-add-file)
      (define-key vlm-media-map (kbd "s") 'emms-shuffle)
      (define-key vlm-media-map (kbd "q") 'emms-stop)

      ;; vlm-media-map track related binds
      (define-key vlm-media-map (kbd "v") 'pause-track)
      (define-key vlm-media-map (kbd "n") 'next-track)
      (define-key vlm-media-map (kbd "p") 'previous-track)
      (define-key vlm-media-map (kbd "r") 'random-track)

      ;; notebook related
      (global-set-key (kbd "<XF86AudioPlay>") 'pause-track)
      (global-set-key (kbd "<XF86AudioNext>") 'next-track)
      (global-set-key (kbd "<XF86AudioPrev>") 'previous-track)

      #+END_SRC

***** Hooks

      #+BEGIN_SRC emacs-lisp

      ;; if emms is available, enable it
      (add-hook 'window-setup-hook
                (lambda ()
                  ;; load required libraries (only mpv)
                  (dolist (feature '(emms-source-file
                                     emms-source-playlist
                                     emms-player-mpv))
                    (require feature nil t))
                  ;; set default player
                  (funcall 'emms-default-players)))

      #+END_SRC

*** Chat
**** Rcirc

     Internet Relay Chat (IRC) is a form of instant communication over
     the Internet. It is mainly designed for group (many-to-many)
     communication in discussion forums called channels, but also allows
     one-to-one communication.

     Rcirc has simple defaults and clear and consistent behavior.
     Message arrival timestamps, activity notification on the mode line,
     message filling, nick completion, and keepalive pings are all
     enabled by default, but can easily be adjusted or turned off.  Each
     discussion takes place in its own buffer and there is a single
     server buffer per connection.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'rcirc nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; non-nil means log irc activity to disk
      (customize-set-variable 'rcirc-log-flag nil)

      ;; non-nil means messages without a channel target will go to the server buffer
      (customize-set-variable 'rcirc-always-use-server-buffer-flag t)

      ;; major-mode function to use in multiline edit buffers
      (customize-set-variable 'rcirc-multiline-major-mode 'text-mode)

      ;; format string to use in nick completions
      (customize-set-variable 'rcirc-nick-completion-format "%s: ")

      ;; list of authentication passwords (not your job)
      (customize-set-variable 'rcirc-authinfo nil)

      ;; prompt string to use in IRC buffers
      ;; %n: nick, %s: server, %t target: channel or user
      (customize-set-variable 'rcirc-prompt "%t] ")

      ;; coding system used to decode incoming irc messages
      (customize-set-variable 'rcirc-decode-coding-system 'utf-8)

      ;; the default reason to send when quitting a server
      (customize-set-variable 'rcirc-default-quit-reason "See You Space Cowboy...")

      ;; the default reason to send when parting from a channel
      (customize-set-variable 'rcirc-default-part-reason "Easy Come, Easy Go...")

      ;; responses which will be hidden when `rcirc-omit-mode is enable
      (customize-set-variable 'rcirc-omit-responses
                              '("JOIN" "PART" "QUIT" "NICK"))

      ;; the minimum interval in seconds between reconnect attempts
      ;; when 0, do not auto-reconnect
      (customize-set-variable 'rcirc-reconnect-delay 2)

      #+END_SRC

***** Hooks

      #+BEGIN_SRC emacs-lisp

      (add-hook 'rcirc-mode-hook
                (lambda ()
                  ;; (funcall 'rcirc-omit-mode 1)
                  (funcall 'flyspell-mode 1)))

      #+END_SRC

***** Binds
*** Browser
**** Eww

     Elisp www browser configuration.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'eww nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; prefix uRL to search engine
      (customize-set-variable 'eww-search-prefix "https://www.google.com/search?q=")
      ;; (customize-set-variable eww-search-prefix "https://duckduckgo.com/html/?q=")

      ;; directory where files will downloaded
      (customize-set-variable 'eww-download-directory "~/down")

      ;; symbol used to represent a checkbox
      (customize-set-variable 'eww-form-checkbox-symbol "[ ]")

      ;; symbol used to represent a selected checkbox.
      (customize-set-variable 'eww-form-checkbox-selected-symbol "[X]")
      ;; (customize-set-variable eww-form-checkbox-symbol "☐") ; Unicode hex 2610
      ;; (customize-set-variable eww-form-checkbox-selected-symbol "☑") ; Unicode hex 2611

      ;; directory where bookmark files will be stored
      (customize-set-variable 'eww-bookmarks-directory
                              (expand-file-name "cache/" user-emacs-directory))

      #+END_SRC

***** Hooks

      #+BEGIN_SRC emacs-lisp

      (add-hook 'eww-mode-hook
                ;; disable truncate lines
                (lambda () (setq truncate-lines nil)))

      #+END_SRC

***** Binds

      #+BEGIN_SRC emacs-lisp

      (eval-after-load 'eww
        (lambda ()
          (when (boundp 'eww-mode-map)
            (define-key eww-mode-map (kbd "C-j") 'eww-follow-link))))

      #+END_SRC

**** Browse-url

     This package provides functions which read a URL (Uniform Resource
     Locator) from the minibuffer, defaulting to the URL around point,
     and ask a World-Wide Web browser to load it.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'browse-url nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; the name of the browser program used by ‘browse-url-generic’.
      (customize-set-variable 'browse-url-generic-program "eww")

      ;; function to display the current buffer in a WWW browser: eww
      (customize-set-variable 'browse-url-browser-function 'eww-browse-url)

      #+END_SRC

*** Filters
**** Ag
***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'ag nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; non-nil means we highlight the current search term in results
      (customize-set-variable 'ag-highlight-search t)

      ;; non-nil means we reuse the existing search results buffer
      (customize-set-variable 'ag-reuse-buffers t)

      ;; non-nil means we open search results in the same window
      (customize-set-variable 'ag-reuse-window t)

      #+END_SRC

***** Binds

      #+BEGIN_SRC emacs-lisp

      ;; projects keymap
      (define-key vlm-pm-map (kbd "a") 'ag-project-at-point)

      ;; filter keymap
      (define-key vlm-filter-map (kbd "a") 'ag)
      (define-key vlm-filter-map (kbd "d") 'ag-dired)
      (define-key vlm-filter-map (kbd "f") 'ag-files)

      #+END_SRC

**** Grep

     This package provides the grep facilities documented in t
     he Emacs user's manual.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'grep nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; the default find command for M-x grep-find or M-x find-grep
      (customize-set-variable 'grep-find-command
                              '("find ~/ -type f -exec grep --color -nH --null -e  \\{\\} +" . 49))

      #+END_SRC

***** Binds

      #+BEGIN_SRC emacs-lisp

      (define-key vlm-filter-map (kbd "r") 'rgrep)

      #+END_SRC

*** Checkers
**** Ispell

     Aspell is a utility program that connects to the Aspell library so that
     it can function as an ispell -a replacement, as an independent spell
     checker, as a test utility to test out Aspell library features, and as
     a utility for managing dictionaries used by the library.

     Note : Ispell minor mode configuration requires aspell program.
     TIP  : On FreeBSD: pkg info aspell.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'ispell nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; program invoked by M-x ispell-word and M-x ispell-region commands.
      (customize-set-variable 'ispell-program-name "aspell")

      ;; english dictionary
      ;; (customize-set-variable 'ispell-alternate-dictionary "/usr/lib/aspell-0.60/en-common.rws")

      #+END_SRC

***** Display

      #+BEGIN_SRC emacs-lisp

      ;; todo research (not working)
      ;; (add-to-list 'display-buffer-alist
      ;;              '("\\*Choices\\*"
      ;;                (display-buffer-below-selected display-buffer-at-bottom)
      ;;                (inhibit-same-window . t)
      ;;                (window-height . 0.2)))

      #+END_SRC

***** Enable

      #+BEGIN_SRC emacs-lisp

      ;; enable globally after emacs startup
      (add-hook 'window-setup-hook
                (lambda ()
                  (funcall 'ispell-minor-mode 1)))

      #+END_SRC

***** Binds

      #+BEGIN_SRC emacs-lisp

      ;; vlm-sc-map
      (define-key vlm-sc-map (kbd "i") 'ispell-word)
      (define-key vlm-sc-map (kbd "I") 'ispell-buffer)

      #+END_SRC

**** Flyspell

     Flyspell is a minor Emacs mode performing on-the-fly spelling
     checking.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'flyspell nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; a string that is the name of the default dictionary
      ;; this is passed to the ‘ispell-change-dictionary’ when flyspell is started
      (customize-set-variable 'flyspell-default-dictionary "english")

      #+END_SRC

***** Enable

      #+BEGIN_SRC emacs-lisp

      (add-hook 'text-mode-hook #'flyspell-mode)
      (add-hook 'prog-mode-hook #'flyspell-prog-mode)

      #+END_SRC

**** Flymake


     Flymake is a library to performing on-the-fly syntax checks.
     Flymake collects diagnostic information for multiple sources,
     called backends, and visually annotates the relevant portions in
     the buffer.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'flymake nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      #+END_SRC

***** Binds

      #+BEGIN_SRC emacs-lisp

      (define-key vlm-sc-map (kbd "e") 'flymake-show-diagnostics-buffer)

      #+END_SRC

***** Enable

      #+BEGIN_SRC emacs-lisp

      (add-hook 'prog-mode-hook #'flymake-mode)

      #+END_SRC

*** Launchers

    An application launcher is a computer program that helps a user
    to locate and start other computer programs.

**** Cannon

     Dmenu is a fast and lightweight dynamic menu for X.
     It reads arbitrary text from stdin, and creates a
     menu with one item for each line. The user can then select an item,
     through the arrow keys or typing a part of the name,
     and the line is printed to stdout.

     Cannon mimics Dmenu inside Emacs with the help of minibuffer.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'cannon nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; file in which the launcher state is
      ;; saved between Emacs sessions
      (customize-set-variable 'cannon-cache-file
                              (expand-file-name "cache/cannon-cache"
                                                user-emacs-directory))

      #+END_SRC

***** Binds

      #+BEGIN_SRC emacs-lisp

      ;; clt-x-map (C-x) prefix
      (define-key ctl-x-map (kbd "C-l") 'cannon-launch)

      #+END_SRC

***** Enable

      #+BEGIN_SRC emacs-lisp :tangle yes

      ;; turn on cannon-mode
      (add-hook 'window-setup-hook
                (lambda ()
                  (funcall 'turn-on-cannon-mode)))

      #+END_SRC

*** Clients

    Network Client is a software that runs on a client computer
    and allows it to establish connectivity with services
    running on server computers.

**** Verb

     Verb is a package that allows you to organize and send HTTP
     requests from Emacs. See the project's README.md file for more
     details.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'verb nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; if non-nil, kill all response buffers before sending a request
      (customize-set-variable 'verb-auto-kill-response-buffers t)

      ;; value "when-empty" means automatically show the headers buffer only
      (customize-set-variable 'verb-auto-show-headers-buffer 'when-empty)

      ;; timeout (s) for HTTP requests made from a Babel source blocks
      (customize-set-variable 'verb-babel-timeout 8)

      ;; when set to a non-nil value, enable Lisp completion in code tags
      (customize-set-variable 'verb-enable-elisp-completion nil)

      ;; when non-nil, log different events in the *Verb Log* buffer
      (customize-set-variable 'verb-enable-log t)

      #+END_SRC

***** Hooks

      #+BEGIN_SRC emacs-lisp

      (add-hook 'org-ctrl-c-ctrl-c-hook
                (lambda ()
                  (when (and (boundp 'verb-mode) verb-mode)
                    (funcall 'verb-send-request-on-point 'this-window))))

      #+END_SRC

**** Mentor
*** Interpreters

    Generic interpreter interface configurations and customization,
    languages specific interpreters (for example: python)
    will be placed in the ~Programming~ sections.

**** Comint

     This package defines a general command-interpreter-in-a-buffer
     (comint mode). The idea is that you can build specific process-in-a-buffer
     modes on top of comint mode -- e.g., Lisp, shell, scheme, T, soar, ....

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'comint nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; if non-nil, assume that the subprocess echoes any input
      (customize-set-variable 'comint-process-echoes t)

      ;; if non-nil, use comint-prompt-regexp to recognize prompts.
      (customize-set-variable 'comint-use-prompt-regexp nil)

      ;; regexp to recognize prompts in the inferior process.
      ;; (customize-set-variable 'comint-prompt-regexp shell-prompt-pattern)

      ;; value to use for TERM when the system uses terminfo.
      (customize-set-variable 'comint-terminfo-terminal "eterm-color")

      #+END_SRC

**** IELM
***** Require

      Provides a nice interface to evaluating Emacs Lisp expressions.
      Input is handled by the comint package, and output is passed
      through the pretty-printer.

      #+BEGIN_SRC emacs-lisp

      ;; (require 'ielm nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; if non-nil, after entering the first line of
      ;; an incomplete sexp, a newline will be inserted after the prompt.
      (customize-set-variable 'ielm-dynamic-multiline-inputs t)

      ;; if non-nil, IELM will beep on error
      (customize-set-variable 'ielm-noisy nil)

      ;; prompt used in IELM
      (customize-set-variable 'ielm-prompt "» ")

      ;; if non-nil, the IELM prompt is read only
      (customize-set-variable 'ielm-prompt-read-only nil)

      #+END_SRC

**** Sql

     Specialized ~comint.el~ for SQL interpreters.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'sql nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; select the SQL database product used
      (customize-set-variable 'sql-product "sqlite")

      #+END_SRC

*** Graphics
**** Compton

     Compton is a compositor based on Dana Jansens' version of xcompmgr
     (which itself was written by Keith Packard). It includes some
     improvements over the original xcompmgr, like window frame opacity and
     inactive window transparency.

     Start compton after emacs initialize (late time decision), put
     this at =~/.xinitrc=.

***** Hooks

      #+BEGIN_SRC emacs-lisp

      ;; start compton after emacs initialize
      ;; (add-hook 'after-init-hook
      ;;           (lambda ()
      ;;             (safe-start-process "compton" "compton" "-b")))

      #+END_SRC

*** Calculators
**** Calc
*** Controllers
**** Slock
***** Binds

      #+BEGIN_SRC emacs-lisp

      ;; ctl-x map
      (define-key ctl-x-map (kbd "<end>") 'lock-screen)

      ;; notebook
      (global-set-key (kbd "<XF86ScreenSaver>") 'lock-screen)

      #+END_SRC

**** Scrot
***** Binds

      #+BEGIN_SRC emacs-lisp

      ;; global-map
      (global-set-key (kbd "<print>") 'capture-screen)

      #+END_SRC

**** Volume
***** Binds

      #+BEGIN_SRC emacs-lisp

      ;; global-map
      (global-set-key (kbd "s-<f6>") 'mute-audio)
      (global-set-key (kbd "s-<f7>") 'lower-volume)
      (global-set-key (kbd "s-<f8>") 'raise-volume)

      ;; notebook
      (global-set-key (kbd "<XF86AudioMute>") 'm-mixer-toggle-audio)
      (global-set-key (kbd "<XF86AudioLowerVolume>") 'm-mixer-lower-volume)
      (global-set-key (kbd "<XF86AudioRaiseVolume>") 'm-mixer-raise-volume)

      #+END_SRC

*** Calendars
**** Calendar

     This package offers a set of functions that implements a calendar
     window. It generates a calendar for the current month, together
     with the previous and coming months, or for any other three-month
     period.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'calendar nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; name of the file in which one’s personal diary of dates is kept
      (customize-set-variable
       'diary-file (expand-file-name "cache/diary" user-emacs-directory))

      #+END_SRC

*** Dashboards

    A dashboard is a type of graphical user interface which often
    provides at-a-glance views of key performance indicators relevant
    to a particular objective or business process.

    In other usage, "dashboard" is another name for
    "progress report" or "report."

*** Office
**** Allout

     Allout outline minor mode provides extensive outline
     formatting and and manipulation beyond standard emacs
     outline mode.

***** Require
***** Customize
**** Outline

     This package is a major mode for editing outline-format documents.
     An outline can be `abstracted' to show headers at any given level,
     with all stuff below hidden.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'outline nil t)

      #+END_SRC

**** Org

     Org is a mode for keeping notes, maintaining ToDo lists, and doing
     project planning with a fast and effective plain-text system.

     Org mode develops organizational tasks around NOTES files that
     contain information about projects as plain text.  Org mode is
     implemented on top of outline-mode, which makes it possible to keep
     the content of large files well structured.  Visibility cycling and
     structure editing help to work with the tree.  Tables are easily
     created with a built-in table editor.  Org mode supports ToDo
     items, deadlines, time stamps, and scheduling.  It dynamically
     compiles entries into an agenda that utilizes and smoothly
     integrates much of the Emacs calendar and diary.  Plain text
     URL-like links connect to websites, emails, Usenet messages, BBDB
     entries, and any files related to the projects.  For printing and
     sharing of notes, an Org file can be exported as a structured ASCII
     file, as HTML, or (todo and agenda items only) as an iCalendar
     file. It can also serve as a publishing tool for a set of linked
     webpages.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'org nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; when non-nil, fontify code in code blocks
      (customize-set-variable 'org-src-fontify-natively t)

      ;; if non-nil, the effect of TAB in a code block is as if it were
      ;; issued in the language major mode buffer
      (customize-set-variable 'org-src-tab-acts-natively t)

      ;; indentation for the content of a source code block.
      (customize-set-variable 'org-edit-src-content-indentation 0)

      ;; confirm before evaluation
      (customize-set-variable 'org-confirm-babel-evaluate t)

      ;; the maximum level for Imenu access to Org headlines
      (customize-set-variable 'org-imenu-depth 8)

      ;; when set to t, Org assumes that you write outlines by indenting
      ;; text in each node to align with the headline, after the stars
      (customize-set-variable 'org-adapt-indentation t)

      ;; how the source code edit buffer should be displayed
      (customize-set-variable 'org-src-window-setup 'current-window)

      ;; non-nil means C-a and C-e behave specially in headlines and items
      (customize-set-variable 'org-special-ctrl-a/e t)

      ;; check if in invisible region before inserting or deleting a character
      ;; Valid values are:
      (customize-set-variable 'org-fold-catch-invisible-edits 'show-and-error)

      #+END_SRC

***** Hooks

      #+BEGIN_SRC emacs-lisp

      (add-hook 'org-mode-hook
                (lambda ()
                  ;; do not truncate lines
                  (setq truncate-lines nil)
                  ;; languages which can be evaluated in Org buffers.
                  (org-babel-do-load-languages
                   'org-babel-load-languages
                   '((lisp t)
                     (emacs-lisp . t)
                     (shell . t)
                     (haskell . t)
                     (ocaml . t)
                     (sqlite . t)
                     (python . t)))))

      #+END_SRC

***** Binds

      #+BEGIN_SRC emacs-lisp

      (eval-after-load 'org-mode
        (progn
          (when (boundp 'org-mode-map)
            (define-key org-mode-map (kbd "C-c C-<up>") 'org-timestamp-up)
            (define-key org-mode-map (kbd "C-c C-<down>") 'org-timestamp-down))))

      #+END_SRC

**** Org-Agenda

     Due to the way Org works, TODO items, time-stamped items, and
     tagged headlines can be scattered throughout a file or even a
     number of files. To get an overview of open action items, or of
     events that are important for a particular date, this information
     must be collected, sorted and displayed in an organized way.

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; the files to be used for agenda display, should be a list of them.
      (customize-set-variable 'org-agenda-files '("~/org/agenda"))

      ;; the separator between blocks in the agenda
      (customize-set-variable 'org-agenda-block-separator "=")

      ;; a single-character string to be used as the bulk mark
      (customize-set-variable 'org-agenda-buld-mark-char ">")

      ;; non-nil means make the block agenda more compact
      (customize-set-variable 'org-agenda-compact-blocks nil)

      ;; when t, a confirmation is always needed.
      ;; when a number N, confirmation is only needed when the text
      ;; to be killed contains more than N non-white lines
      (customize-set-variable 'org-agenda-confirm-kill t)

      ;; if non-nil, include in the agenda entries from
      ;; the Emacs Calendar’s diary
      (customize-set-variable 'org-agenda-include-diary nil)

      ;; inhibit startup when preparing agenda buffers
      ;; when this variable is t, the initialization of the Org agenda
      ;; buffers is inhibited: e.g. the visibility state is not set, the
      ;; tables are not re-aligned, etc.
      (customize-set-variable 'org-agenda-inhibit-startup t)

      ;; non-nil means start the overview always on the specified weekday.
      ;; 0 denotes Sunday, 1 denotes Monday, etc.
      ;; When nil, always start on the current day.
      ;; Custom commands can set this variable in the options section.
      (customize-set-variable 'org-agenda-start-on-weekday 1)

      ;; Number of days to include in overview display.
      ;; Can be day, week, month, year, or any number of days.
      ;; Custom commands can set this variable in the options section.
      (customize-set-variable 'org-agenda-span 'week)

      #+END_SRC

**** Org-present

***** Require
***** Customize

      #+BEGIN_SRC emacs-lisp

      (add-hook 'org-present-mode-hook
                (lambda ()
                  (let ((functions '(org-present-big
                                     org-display-inline-images
                                     org-present-hide-cursor
                                     org-present-read-only)))
                    (mapc (lambda (f) (safe-funcall f)) functions))))

      (add-hook 'org-present-mode-quit-hook
                (lambda ()
                  (let ((functions '(org-present-small
                                     org-remove-inline-images
                                     org-present-show-cursor
                                     org-present-read-write)))
                    (mapc (lambda (f) (safe-funcall f)) functions))))

      #+END_SRC

***** Hooks
***** Binds

**** Tex

     Major mode for editing files of input for TeX, LaTeX, or SliTeX.
     Tries to determine (by looking at the beginning of the file) whether
     this file is for plain TeX, LaTeX, or SliTeX and calls plain-tex-mode,
     latex-mode, or slitex-mode, respectively.  If it cannot be determined,
     such as if there are no commands in the file, the value of ‘tex-default-mode’
     says which mode to use.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'tex-mode nil t)

      #+END_SRC

**** Markdown

     Major mode for editing Markdown files.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'markdown-mode nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      (customize-set-variable 'markdown-command "markdown")

      #+END_SRC

***** Binds

      #+BEGIN_SRC emacs-lisp

      #+END_SRC

**** DocView

     DocView is a document viewer for Emacs.  It converts PDF, PS and DVI files
     to a set of PNG files, one PNG for each page, and displays the PNG images
     inside an Emacs buffer.  This buffer uses `doc-view-mode' which provides
     convenient key bindings for browsing the document.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'doc-view nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; the base directory, where the PNG images will be saved
      (customize-set-variable
       'doc-view-cache-directory
       (concat (expand-file-name user-emacs-directory) "cache/docview"))

      ;; in continuous mode reaching the page edge advances to next/previous page
      (customize-set-variable 'doc-view-continuous t)

      #+END_SRC

**** Dictionary

     Dictionary allows you to interact with dictionary servers.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'dictionary nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; create some clickable buttons on top of the window if non-nil
      (customize-set-variable 'dictionary-create-buttons nil)

      ;; should the dictionary command reuse previous dictionary buffers?
      (customize-set-variable 'dictionary-use-single-buffer t)

      #+END_SRC

***** Functions

      #+BEGIN_SRC emacs-lisp

      (defun vlm-dictionary-search-at-point ()
        "Search WORD in dictionary at point."
        (interactive)
        (let ((word (or (thing-at-point 'word)
                        (read-string "Word: "))))
          (cond
           ((string-equal word "")
            (message "Missing %s word" word))
           (t (when (fboundp 'dictionary-search)
                (dictionary-search word))))))

      #+END_SRC

***** Binds

      #+BEGIN_SRC emacs-lisp

      ;; binds
      (define-key vlm-docs-map (kbd ".") 'vlm-dictionary-search-at-point)

      #+END_SRC

**** Remember

     Todo lists, schedules, phone databases... everything we use
     databases for is really just a way to extend the power of our
     memory. To be able to remember what our conscious mind may not
     currently have access to.

     "Remember" is a mode for remembering data. It uses whatever
     back-end is appropriate to record and correlate the data, but it's
     main intention is to allow you to express as _little_ structure as
     possible up front.

     There are many different databases out there -- and good ones --
     which this mode is not trying to replace. Rather, it's how that
     data gets there that's the question. Most of the time, we just
     want to say "Remember so-and-so's phone number, or that I have to
     buy dinner for the cats tonight."

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'remember nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      #+END_SRC

**** Markdown
***** Require
***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; command to run markdown
      (customize-set-variable 'markdown-command "markdown")

      #+END_SRC

***** Hooks
***** Binds
***** Enable
*** Blogs

    A blog (a truncation of 'weblog') is a discussion or informational
    website published on the World Wide Web consisting of discrete,
    often informal diary-style text entries (posts).

    Posts are typically displayed in reverse chronological order, so
    that the most recent post appears first, at the top of the web page.

**** Org-weblog

     Static blog generators are a dime a dozen.
     This is one more, which focuses on being simple.
     All files are simple org-mode files in a directory.

     The only requirement is that every org file must have a:
     #+TITLE and a #+DATE, and optionally, #+FILETAGS.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'org-weblog nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; title of the blog
      (customize-set-variable
       'org-weblog-publish-title "Hidden Ones")

      ;; url of the blog.
      (customize-set-variable
       'org-weblog-url "https://lambdart.github.io/")

      ;; directory where published HTML files are stored
      (customize-set-variable
       'org-weblog-publish-directory "~/core/dev/hidden-ones/site/preview/")

      ;; directory where published ORG files are stored
      (customize-set-variable
       'org-weblog-posts-directory "~/core/dev/hidden-ones/posts/")

      ;; directory where published ORG files are stored
      (customize-set-variable
       'org-weblog-pages-directory "~/core/dev/hidden-ones/pages/")

      ;; directory where unpublished ORG files are stored.
      (customize-set-variable
       'org-weblog-drafts-directory "~/core/dev/hidden-ones/drafts/")

      ;; ;; use preview versions of posts on multipost pages
      ;; (customize-set-variable 'org-weblog-use-preview-flag t)

      ;; ;; show tags below posts, and generate tag pages
      ;; (customize-set-variable 'org-weblog-enable-tags t)

      ;; ;; when preview is enabled, convert <h1> to <h2> for the previews
      ;; (customize-set-variable 'org-weblog-preview-convert-titles nil)

      ;; ;; the HTML appended to the preview if some part of the post is hidden
      ;; (customize-set-variable 'org-weblog-preview-ellipsis "(...)")

      #+END_SRC

*** Documentation
**** Man

     This package provides a function, `man', with which you can browse
     UNIX manual pages. Formatting is done in background so that you
     can continue to use your Emacs while processing is going on.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'man nil t)

      #+END_SRC

***** Hooks

      #+BEGIN_SRC emacs-lisp

      (add-hook 'Man-mode-hook
                (lambda ()
                  ;; don't truncate lines
                  (setq truncate-lines nil)))

      #+END_SRC

***** Binds

      #+BEGIN_SRC emacs-lisp

      (eval-after-load 'man
        (lambda ()
          (when (boundp 'Man-mode-map)
            (define-key Man-mode-map (kbd "C-j") 'push-button))))

      ;; vlm-docs-map docs actions prefix map
      (define-key vlm-docs-map (kbd "m") 'manual-entry)

      #+END_SRC

**** Woman

     WoMan implements a subset of the formatting performed by the Emacs
     `man' (or `manual-entry') command to format a UN*X manual `page'
     for display, but without calling any external programs.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'woman nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; if non-nil then show the *WoMan-Log* buffer if appropriate
      (customize-set-variable 'woman-show-log nil)

      #+END_SRC

***** Binds

      #+BEGIN_SRC emacs-lisp

      (define-key vlm-docs-map (kbd "w") 'woman)

      #+END_SRC

**** Dash-docs

     This package exposes functionality to work with and search dash
     docsets.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'ddoc nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; default path for docsets
      (customize-set-variable
       'ddoc-docsets-path
       (concat (expand-file-name user-emacs-directory) "docsets"))

      ;; minimum length to start searching in docsets
      ;; (customize-set-variable 'ddoc-min-length 0)

      ;; format of the displayed candidates
      (customize-set-variable 'ddoc-candidate-format "%d %t %n")

      #+END_SRC

***** Functions

      #+BEGIN_SRC emacs-lisp

      (defun vlm-activate-docset (docset)
        "Activate a DOCSET, if available."
        (when (fboundp 'ddoc-activate-docset)
          (funcall 'ddoc-activate-docset docset)))

      #+END_SRC

***** Binds

      #+BEGIN_SRC emacs-lisp

      ;; vlm-docs-map
      ;; (define-key vlm-docs-map (kbd "u") 'ddoc-update-docset)
      (define-key vlm-docs-map (kbd "i") 'ddoc-install-docset)
      (define-key vlm-docs-map (kbd "a") 'ddoc-activate-docset)
      (define-key vlm-docs-map (kbd "d") 'ddoc-deactivate-docset)
      (define-key vlm-docs-map (kbd "l") 'ddoc-find-file-at-point)

      #+END_SRC

***** Enable

      #+BEGIN_SRC emacs-lisp

      ;; enable ddoc after emacs startup
      (add-hook 'window-setup-hook
                (lambda ()
                  (funcall 'turn-on-ddoc-mode)))

      #+END_SRC

**** Rfc-docs

     Browser/search/read local RFC files.
     To make it work faster download the RFC files and change
     the 'rfc-docs-directory' dir to match
     the path where all the RFCs were extracted.

     The RFC collection can be downloaded [[https://www.rfc-editor.org/retrieve/bulk][here]].

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'rfc-docs nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; the directory where RFC documents are stored
      (customize-set-variable
       'rfc-docs-directory
       (concat (expand-file-name user-emacs-directory) "rfc/"))

      #+END_SRC

*** Translators
**** Google-Translate

     Google translate interface.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'google-translate nil t)
      ;; (require 'google-translate-smooth-ui nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; alist of translation directions
      ;; each of direction could be selected directly in
      ;; the minibuffer during translation.
      (customize-set-variable
       'google-translate-translation-directions-alist
       '(("pt" . "en") ("en" . "pt")))

      ;; default target language
      (customize-set-variable
       'google-translate-default-target-language "pt")

      ;; default source language
      ;; "auto" if you want Google Translate to always detect the source language
      (customize-set-variable 'google-translate-default-source-language
                              "auto")

      ;; determines where translation output will be displayed, if
      ;; `nil' the translation output will be displayed in the pop up
      ;; buffer (default).
      (customize-set-variable 'google-translate-output-destination nil)

      #+END_SRC

*** Navigation
**** Imenu

     This package provide a framework for mode-specific buffer indexes.
     A buffer index is an alist of names and buffer positions.
     For instance all functions in a C-file and their positions.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'imenu nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; use a popup menu rather than a minibuffer prompt (no)
      (customize-set-variable 'imenu-use-popup-menu nil)

      ;; if non-nil, eagerly popup the completion buffer.
      (customize-set-variable 'imenu-eager-completion-buffer t)

      ;; non-nil means Imenu should always rescan the buffers
      (customize-set-variable 'imenu-auto-rescan t)

      ;; when non-nil, ignore text inside comments and strings
      (customize-set-variable 'imenu-generic-skip-comments-and-strings nil)

      ;; maximum number of elements in a mouse menu for Imenu
      (customize-set-variable 'imenu-max-items 64)

      ;; if a number, truncate Imenu entries to that length
      (customize-set-variable 'imenu-max-item-length 256)

      #+END_SRC

***** Binds

      #+BEGIN_SRC emacs-lisp

      (global-set-key (kbd "M-`") 'imenu)

      #+END_SRC

**** Etags

     The etags program is used to create a tag table file, in a format
     understood by emacs(1).

     This package provides a elisp etags interface and functionality
     related with the tags system

     To switch to a new tags table, do not set `tags-file-name; instead,
     invoke ‘visit-tags-table’, which is the only reliable way of
     setting the value of this variable, whether buffer-local or global.
     Use the ‘etags’ program to make a tags table file.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'etags nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; control whether to add a new tags table to the current list
      ;; t means do; nil means don’t (always start a new list)
      (customize-set-variable 'tags-add-tables nil)

      ;; if non-nil, print the name of the tags file in the *Tags List* buffer.
      (customize-set-variable 'tags-apropos-verbose t)

      ;; whether tags operations should be case-sensitive
      ;; a value of t means case-insensitive, a value of nil means case-sensitive
      (customize-set-variable 'tags-case-fold-search t)

      #+END_SRC

***** Binds

      #+BEGIN_SRC emacs-lisp

      (define-key vlm-tags-map (kbd "s") 'tags-search)
      (define-key vlm-tags-map (kbd "r") 'tags-query-replace)
      (define-key vlm-tags-map (kbd "f") 'find-tag)
      (define-key vlm-tags-map (kbd "l") 'list-tags)
      (define-key vlm-tags-map (kbd "v") 'visit-tags-table)
      (define-key vlm-tags-map (kbd "d") 'tags-reset-tags-tables)
      (define-key vlm-tags-map (kbd "c") 'select-tags-table)

      #+END_SRC

**** Xref

     This file provides a somewhat generic infrastructure for cross
     referencing commands, in particular `find-definition'.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'xref nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; if non-nil, prompt for the identifier to find
      ;; when t, always prompt for the identifier name
      ;; when nil, prompt only when there’s no value at point we can use,
      ;; or when the command has been called with the prefix argument.
      (customize-set-variable 'xref-prompt-for-identifier t)

      ;; (not xref-find-definitions
      ;;      xref-find-definitions-other-window
      ;;      xref-find-definitions-other-frame)

      #+END_SRC

***** Binds

      #+BEGIN_SRC emacs-lisp

      ;; (define-key vlm-tags-map (kbd ".") 'xref-find-apropos)

      #+END_SRC

*** Debugging
**** Gud

     The GUD (Grand Unified Debugger) library provides an Emacs interface to
     a wide variety of symbolic debuggers.  It can run the GNU Debugger
     (GDB), as well as DBX, SDB, XDB, Guile REPL debug commands, Perl’s
     debugging mode, the Python debugger PDB, and the Java Debugger
     JDB.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'gud nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      #+END_SRC

**** Gdb-mi

     This mode acts as a graphical user interface to GDB.  You can interact with
     GDB through the GUD buffer in the usual way, but there are also further
     buffers which control the execution and describe the state of your program.
     It separates the input/output of your program from that of GDB and displays
     expressions and their current values in their own buffers.  It also uses
     features such as the fringe/display margin for breakpoints, and
     the toolbar (see the GDB Graphical Interface section in the Emacs info
     manual).

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'gdb-mi nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      #+END_SRC

**** Realgud
**** Rmsbolt

     A compiler output viewer.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'rmsbolt nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; which output assembly format to use.
      (customize-set-variable 'rmsbolt-asm-format "att")

      ;;    whether we should disassemble an output binary
      (customize-set-variable 'rmsbolt-disassemble t)

      ;; rmsbolt mode lighter
      (customize-set-variable 'rmsbolt-mode-lighter "RMS")

      #+END_SRC

*** Testing
**** Ert
*** Compilation
**** Auto-compile

     This package provides two minor modes which automatically
     recompile Emacs Lisp source files. Together these modes guarantee
     that Emacs never loads outdated byte code files. (Research)

**** Compile

     Emacs can run compilers for languages such as C and Fortran, feeding the
     compilation log into an Emacs buffer.  It can also parse the error
     messages and show you where the errors occurred.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'compile nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; non-nil to scroll the *compilation* buffer window as output appears
      (customize-set-variable 'compilation-scroll-output t)

      ;; if t, always kill a running compilation process before starting a new one
      (customize-set-variable 'compilation-always-kill t)

      ;; non-nil means M-x compile asks which buffers to save before compiling
      ;; otherwise, it saves all modified buffers without asking
      (customize-set-variable 'compilation-ask-about-save nil)

      ;; if non-nil, automatically jump to the first error during compilation
      ;; (customize-set-variable 'compilation-auto-jump-to-first-error nil)

      #+END_SRC

***** Hooks

      #+BEGIN_SRC emacs-lisp

      ;; don't truncate lines
      (add-hook 'compilation-mode-hook
                (lambda ()
                  (setq truncate-lines nil)))

      ;; fix compilation buffer colors
      (add-hook 'compilation-filter-hook
                (lambda ()
                  (when (and (eq major-mode 'compilation-mode)
                             (boundp 'compilation-filter-start))
                    (safe-funcall 'ansi-color-apply-on-region
                                  compilation-filter-start
                                  (point-max)))))

      #+END_SRC

***** Binds

      #+BEGIN_SRC emacs-lisp

      ;; utils map
      ;; (define-key vlm-utils-map (kbd "c") 'compile-command-history)

      #+END_SRC

*** Versioning

    Version control packages.

**** Magit

     Magit is an interface to the version control system Git,
     implemented as an Emacs package.  Magit aspires to be a complete
     Git porcelain.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'magit nil t)

      #+END_SRC

***** Binds

      #+BEGIN_SRC emacs-lisp

      (define-key ctl-x-map (kbd "j") 'magit-status)

      #+END_SRC

***** Hooks

      #+BEGIN_SRC emacs-lisp

      (add-hook 'magit-status-mode-hook
                (lambda()
                  (setq truncate-lines nil)))

      #+END_SRC

*** Projects
**** Ede

     EDE is the top level Lisp interface to a
     project management scheme for Emacs.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'ede nil t)

      #+END_SRC

**** Project

     This file contains generic infrastructure for dealing with
     projects, some utility functions, and commands using that
     infrastructure.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'project nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; non-nil to display list of buffers to kill before killing project buffers
      ;; hide  used by ‘project-kill-buffers’
      (customize-set-variable 'project-kill-buffers-display-buffer-list t)

      ;; file in which to save the list of known projects
      (customize-set-variable 'project-list-file
                              (expand-file-name "cache/projects"
                                                user-emacs-directory))

      #+END_SRC

***** Binds

      #+BEGIN_SRC emacs-lisp

      ;; (define-key vlm-pm-map (kbd "p") 'ag-project-files)
      (define-key vlm-pm-map (kbd "p") 'ag-project-at-point)
      (define-key vlm-pm-map (kbd "o") 'project-switch-project)
      (define-key vlm-pm-map (kbd "d") 'project-dired)
      (define-key vlm-pm-map (kbd "s") 'project-search)
      (define-key vlm-pm-map (kbd "g") 'project-find-regexp)
      (define-key vlm-pm-map (kbd "f") 'project-find-file)
      (define-key vlm-pm-map (kbd "k") 'project-kill-buffers)
      (define-key vlm-pm-map (kbd "r") 'project-query-replace-regexp)
      (define-key vlm-pm-map (kbd "j") 'magit-project-status)
      (define-key vlm-pm-map (kbd "<f5>") 'project-compile)
      (define-key vlm-pm-map (kbd "&") 'project-eshell)
      (define-key vlm-pm-map (kbd "x") 'project-execute-extended-command)

      #+END_SRC

***** Hooks
***** Enable
*** Containers
*** Misc
**** Speedbar

     The =speedbar= library provides a frame in which files, and locations in
     files are displayed. These items can be clicked on with mouse-2 in
     to display that file location.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'seedbar nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; non-nil if speedbar should display icons
      (customize-set-variable 'speedbar-use-images nil)

      ;; non-nil means use imenu for file parsing, nil to use etags
      (customize-set-variable 'speedbar-use-imenu-flag t)

      #+END_SRC

** Development

   Interoperability is a characteristic of a product or system to work with
   other products or systems. While the term was initially defined for
   information technology or systems engineering services to allow for
   information exchange, a broader definition takes into account social,
   political, and organizational factors that impact system-to-system
   performance.

*** Common

    Common programming modes (minor/major).

**** Prog

     Generic programming mode, from which others derive.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'prog-mode nil t)

      #+END_SRC

***** Binds

      #+BEGIN_SRC emacs-lisp

      (define-key prog-mode-map (kbd "<tab>") 'ace-completion-at-point-or-indent)

      #+END_SRC

**** Hideshow

     Minor mode to hide and show code and comment blocks.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'hideshow nil t)

      #+END_SRC

***** Hooks

      #+BEGIN_SRC emacs-lisp

      (add-hook 'prog-mode-hook 'hs-minor-mode)

      #+END_SRC

***** Binds

      #+BEGIN_SRC emacs-lisp

      ;; ctl-x-map
      (define-key ctl-x-map (kbd "[") 'hs-toggle-hiding)

      #+END_SRC

**** Conf

     This package is designed to edit many similar varieties of
     Configuration and initialization files.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'conf-mode nil t)

      #+END_SRC

***** Enable

      #+BEGIN_SRC emacs-lisp

      (add-hook 'window-setup-hook
                (lambda ()
                  (add-to-list 'auto-mode-alist '("\\.compose\\'" . conf-mode))
                  (add-to-list 'auto-mode-alist '("\\.dockerfile\\'" . conf-mode))))

      #+END_SRC

**** Text

     This package provides the fundamental text mode documented in the
     Emacs user's manual.

     Major mode for editing text written for humans to read.
     In this mode, paragraphs are delimited only by blank or white lines.
     You can thus get the full benefit of adaptive filling
     (see the variable `adaptive-fill-mode').

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'text-mode nil t)

      #+END_SRC

***** Hooks

      #+BEGIN_SRC emacs-lisp

      (add-hook 'text-mode-hook
                (lambda ()
                  ;; turn on auto fill mode
                  (turn-on-auto-fill)))

      #+END_SRC

***** Binds

      #+BEGIN_SRC emacs-lisp

      (define-key text-mode-map (kbd "C-c C-g") 'keyboard-quit)
      (define-key text-mode-map (kbd "C-c C-k") 'with-editor-cancel)
      (define-key text-mode-map (kbd "C-c C-c") 'with-editor-finish)

      #+END_SRC

**** Subword

     This package provides the `subword' minor mode, which merges the
     old remap-based subword.el (derived from cc-mode code) and
     cap-words.el, which takes advantage of core Emacs
     word-motion-customization functionality.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'subword nil t)

      #+END_SRC

***** Enable

      #+BEGIN_SRC emacs-lisp

      (add-hook 'window-setup-hook
                (lambda ()
                  (funcall 'global-subword-mode 1)))

      #+END_SRC

**** Paren

     It will display highlighting on whatever paren matches the one
     before or after point.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'paren nil t)

      #+END_SRC

***** Enable

      #+BEGIN_SRC emacs-lisp

      ;; visualization of matching parens
      (add-hook 'window-setup-hook
                (lambda ()
                  (funcall 'show-paren-mode 1)))

      #+END_SRC

**** Make-mode

     Major mode for editing standard Makefiles.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'make-mode nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; if non-nil, automatically clean up continuation lines when saving
      (customize-set-variable 'makefile-cleanup-continuations t)

      ;; if non-nil, insert a TAB after a target colon
      (customize-set-variable 'makefile-tab-after-target-colon t)

      #+END_SRC

***** Hooks

**** Cmake-mode

     Provides syntax highlighting and indentation for CMakeLists.txt and
     *.cmake source files.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'cmake-mode nil t)

      #+END_SRC

*** Lisp
**** Lisp

     The base major mode for editing Lisp code (used also for Emacs Lisp).
     This mode is documented in the Emacs manual.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'lisp-mode nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; number of columns to indent the second line of a (def...) form
      (customize-set-variable 'lisp-body-indent 2)

      #+END_SRC

*** Elisp
**** Elisp

     The major mode for editing Emacs Lisp code.
     Tis mode is documented in the Emacs manual.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'elisp-mode nil t)

      #+END_SRC

***** Hooks

      #+BEGIN_SRC emacs-lisp

      ;; enable minor modes
      (add-hook 'emacs-lisp-mode-hook
                (lambda()
                  (funcall 'eldoc-mode 1)))

      (add-hook 'lisp-interaction-mode-hook
                (lambda()
                  (funcall 'eldoc-mode 1)))

      ;; (add-hook 'emacs-lisp-mode-hook (lambda ()))

      #+END_SRC

***** Binds

      #+BEGIN_SRC emacs-lisp

      ;; emacs-lisp-mode-map
      (eval-after-load 'elisp-mode
        (lambda ()
          (when (boundp 'emacs-lisp-mode-map)
            ;; unbind
            (define-key emacs-lisp-mode-map (kbd "DEL") 'nil)
            (define-key emacs-lisp-mode-map (kbd "ESC") 'nil)
            (define-key emacs-lisp-mode-map (kbd "C-x") 'nil)
            (define-key emacs-lisp-mode-map (kbd "C-M-x") 'nil)
            (define-key emacs-lisp-mode-map (kbd "C-M-q") 'nil)

            ;; bind
            (define-key emacs-lisp-mode-map (kbd "C-c C-f") 'eval-defun)
            (define-key emacs-lisp-mode-map (kbd "C-c C-r") 'eval-region)
            (define-key emacs-lisp-mode-map (kbd "C-c C-b") 'eval-buffer)
            (define-key emacs-lisp-mode-map (kbd "C-c C-c") 'emacs-lisp-byte-compile)
            (define-key emacs-lisp-mode-map (kbd "C-c C-n") 'emacs-lisp-native-compile-and-load))))

      #+END_SRC

*** Common-lisp
**** Slime

    SLIME is the Superior Lisp Interaction Mode for Emacs.

    SLIME extends Emacs with support for interactive programming in
    Common Lisp. The features are centered around slime-mode, an Emacs
    minor-mode that complements the standard lisp-mode.

    While lisp-mode supports editing Lisp source files, slime-mode
    adds support for interacting with a running Common Lisp process
    for compilation, debugging, documentation lookup, and so on.

***** Require

     #+BEGIN_SRC emacs-lisp

     ;; (require 'slime nil t)
     (require 'slime-autoloads)

     #+END_SRC

***** Customize

     #+BEGIN_SRC emacs-lisp

     ;; "/usr/local/bin/ccl"
     ;; program name for invoking an inferior Lisp in Inferior Lisp mode
     (customize-set-variable 'inferior-lisp-program "/usr/local/bin/sbcl")

     ;; never doesn’t load the fasl
     (customize-set-variable 'slime-load-failed-fasl 'never)

     ;; if non-nil, kill slime processes without query
     (customize-set-variable 'slime-kill-without-query-p t)

     ;; set truncate-lines in popup buffers
     (customize-set-variable 'slime-truncate-lines t)

     #+END_SRC

***** Hooks

     #+BEGIN_SRC emacs-lisp

     (add-hook 'slime-mode-hook
               (lambda ()
                 ;; a list of contrib packages to load with SLIME
                 (when (boundp 'slime-contribs)
                   (setq slime-contribs
                         '(slime-fancy slime-asdf slime-quicklisp)))
                 (setq-local ace-collection-functions
                             '(slime-simple-completions))))

     (add-hook 'slime-repl-mode-hook
               (lambda ()
                 (setq-local ace-collection-functions
                             '(slime-simple-completions))))

     (add-hook 'slime-load-hook
               (lambda ()
                 (and (boundp 'slime-prefix-map)
                      (define-key slime-prefix-map
                                  (kbd "M-h")
                                  'slime-documentation-lookup))))

     #+END_SRC

***** Binds

     #+BEGIN_SRC emacs-lisp

     ;; slime-repl-mode
     (eval-after-load 'slime-repl
       (lambda ()
         (when (boundp 'slime-repl-mode-map)
           (progn
             (define-key slime-repl-mode-map (kbd "C-c C-p") 'slime-repl-set-package)
             (define-key slime-repl-mode-map (kbd "C-c C-l") 'slime-quicklisp-load-system)))))

     ;; slime-mode
     (eval-after-load 'slime
       (lambda ()
         (when (boundp 'slime-mode-map)
           (progn
             ;; unbind
             (define-key slime-mode-map (kbd "M-n") 'nil)
             (define-key slime-mode-map (kbd "M-p") 'nil)
             (define-key slime-mode-map (kbd "C-c C-y") 'nil)
             (define-key slime-mode-map (kbd "C-c ~") 'nil)
             (define-key slime-mode-map (kbd "C-c M-k") 'nil)
             (define-key slime-mode-map (kbd "C-c C-s") 'nil)
             ;; bind
             (define-key slime-mode-map (kbd "M-h f")   'slime-describe-function)
             (define-key slime-mode-map (kbd "M-h M-f") 'slime-describe-function)
             (define-key slime-mode-map (kbd "M-h d")   'slime-describe-symbol)
             (define-key slime-mode-map (kbd "M-h M-d") 'slime-describe-symbol)
             (define-key slime-mode-map (kbd "C-c C-a") 'slime-apropos)
             (define-key slime-mode-map (kbd "C-c C-i") 'slime-inspect)
             (define-key slime-mode-map (kbd "C-c C-z") 'slime-interrupt)
             (define-key slime-mode-map (kbd "C-c C-b") 'slime-eval-buffer)
             (define-key slime-mode-map (kbd "C-c C-r") 'slime-eval-region)
             (define-key slime-mode-map (kbd "C-c C-j") 'slime-eval-last-expression-in-repl)
             (define-key slime-mode-map (kbd "C-c C-e") 'slime-interactive-eval)
             (define-key slime-mode-map (kbd "C-c C-k") 'slime-call-defun)
             (define-key slime-mode-map (kbd "C-c x")   'slime-compile-defun)
             (define-key slime-mode-map (kbd "C-c C-e") 'slime-interactive-eval)
             (define-key slime-mode-map (kbd "C-c C-m") 'slime-macroexpand-1)
             (define-key slime-mode-map (kbd "C-c M-m") 'slime-macroexpand-all)
             (define-key slime-mode-map (kbd "C-c C-x") 'slime-compile-defun)
             (define-key slime-mode-map (kbd "C-c C-/") 'slime-disassemble-symbol)
             (define-key slime-mode-map (kbd "C-c C-.") 'slime-export-symbol-at-point)
             (define-key slime-mode-map (kbd "C-c C-c") 'slime-compile-and-load-file)
             (define-key slime-mode-map (kbd "C-c C-f") 'slime-load-file)
             (define-key slime-mode-map (kbd "C-c C-q") 'slime-unintern-symbol)
             (define-key slime-mode-map (kbd "C-c C-l") 'slime-quicklisp-load-system)
             (define-key slime-mode-map (kbd "C-c C-p") 'slime-repl-set-package)
             (define-key slime-mode-map (kbd "C-c C-o") 'slime-switch-to-output-buffer)))))

     #+END_SRC

***** Enable
*** Clojure
***** Clojure
****** Require
****** Customize
****** Hooks

       #+BEGIN_SRC emacs-lisp

       (add-hook 'clojure-mode-hook #'iclj-mode)

       #+END_SRC

***** ICLJ
****** Require

       #+BEGIN_SRC emacs-lisp

       ;; (require 'iclj nil t)

       #+END_SRC

****** Customize
****** Hooks

       #+BEGIN_SRC emacs-lisp

       (add-hook 'iclj-mode-hook
                 (lambda ()
                   (setq-local ace-collection-functions
                               '(ace-collection-dabbrev-code
                                 ace-collection-imenu
                                 ace-collection-filenames
                                 ace-collection-clojure-dictionary
                                 iclj-completion-completions))))

       #+END_SRC

*** Scheme
**** Scheme
***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; program invoked by the `run-scheme' command
      (customize-set-variable 'scheme-program-name "csi")

      #+END_SRC

**** Chicken
***** Hooks

     #+BEGIN_SRC emacs-lisp

     ;; (remove-hook 'scheme-mode-hook 'chicken-mode)
     (add-hook 'scheme-mode-hook 'chicken-mode)

     #+END_SRC

**** Geiser
***** Require

     #+BEGIN_SRC emacs-lisp

     ;; (require 'geiser nil t)

     #+END_SRC

***** Customize

     #+BEGIN_SRC emacs-lisp

     ;; whether ‘geiser-mode’ should be active by default in all scheme buffers
     ;; (customize-set-variable 'geiser-mode-auto-p nil)

     #+END_SRC

***** Hooks

     #+BEGIN_SRC emacs-lisp

     ;; (remove-hook 'scheme-mode-hook 'geiser-mode--maybe-activate)

     #+END_SRC

*** GLSL
**** GLSL

     Major mode for editing OpenGLSL grammar files, usually files
    ending with .vert, .frag, .glsl, .geom. Is is based on
    c-mode plus some features and pre-specified fonts and
    faces properties.

***** Enable

     #+BEGIN_SRC emacs-lisp

     ;;;###autoload
     (progn
       (add-to-list 'auto-mode-alist '("\\.vert\\'" . glsl-mode))
       (add-to-list 'auto-mode-alist '("\\.frag\\'" . glsl-mode))
       (add-to-list 'auto-mode-alist '("\\.geom\\'" . glsl-mode))
       (add-to-list 'auto-mode-alist '("\\.glsl\\'" . glsl-mode)))

     #+END_SRC

*** Haskell
**** Haskell

     Haskell mode is an Haskell development Environment for
     GNU Emacs version 24.3 or later. It provides syntax-based
     indentation, font locking, editing cabal files, and supports
     running an inferior Haskell interpreter (e.g. GHCi).

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'haskell nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; default function to use for completion
      (customize-set-variable 'haskell-completing-read-function 'completing-read)

      ;; whether to add a "declarations" menu entry to menu bar
      (customize-set-variable 'haskell-decl-scan-bindings-as-variables t)

      ;; whether to put top-level value bindings into a "variables" category
      (customize-set-variable 'haskell-decl-scan-bindings-as-variables t)

      #+END_SRC

***** Hooks

      #+BEGIN_SRC emacs-lisp

      (add-hook 'haskell-mode-hook
                (lambda ()
                  ;; haskell indentation mode that deals with the layout rule.
                  ;; it rebinds RET, DEL and BACKSPACE, so that indentations can be
                  ;; set and deleted as if they were real tabs.
                  (safe-funcall 'haskell-indentation-mode 1)

                  ;; minor mode for enabling haskell-process interaction
                  ;; non-nil if Interactive-Haskell mode is enabled.
                  (safe-funcall 'interactive-haskell-mode 1)))

      #+END_SRC

**** Inf-Haskell

     A major mode for the buffer that holds the inferior process.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'inf-haskell nil t)

      #+END_SRC

**** Haskell-doc

     This package provides features to show the type of the Haskell function
     under the cursor in the minibuffer. It acts as a kind of
     "Emacs background process", by regularly checking the word under
     the cursor and matching it against a list of prelude, library,
     local and global functions.

     This program was inspired by the `eldoc.el'.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'haskell-doc nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; if non-nil use inf-haskell.el to get type and kind information
      (customize-set-variable 'haskell-doc-use-inf-haskell t)

      #+END_SRC

*** Elixir
**** Elixir-mode

     Provides font-locking, indentation and navigation support
     for the Elixir programming language.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'elixir-mode nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; additional arguments to `mix format`'
      ;; (customize-set-variable 'elixir-format-arguments nil)

      #+END_SRC

***** Hooks

      #+BEGIN_SRC emacs-lisp

      (add-hook 'elixir-mode-hook
                (lambda ()
                  ;; set dash docsets
                  (vlm-activate-docset '"Elixir")))

      #+END_SRC

**** Alchemist
*** R
**** Ess-r-mode

     Major mode for editing R source.

     This package defines all the R customizations for ESS.
     See ess-s-lang.el for general S language customizations.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'ess-r-mode nil t)

      #+END_SRC

*** C/C++
**** Cmacexp


     Expand C macros in the region, using the C preprocessor.
     Normally display output in temp buffer, but
     prefix arg means replace the region with it.

     The result of the expansion is put in a separate buffer.
     A user option allows the window displaying the buffer to be optimally sized.

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; non-nil means shrink the *Macroexpansion* window to fit its contents
      (customize-set-variable 'c-macro-shrink-window-flag t)

      ;; non-nil makes `c-macro-expand' prompt for preprocessor arguments
      (customize-set-variable 'c-macro-prompt-flag t)

      #+END_SRC

**** CC-mode

     This package provides GNU Emacs major modes for editing C, C++,
     Objective-C, Java, CORBA's IDL, Pike and AWK code.  As of the
     latest Emacs and XEmacs releases, it is the default package for
     editing these languages.  This package is called "CC Mode", and
     should be spelled exactly this way.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'cc-mode nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; style which gets installed by default when a file is visited
      (customize-set-variable 'c-default-style '(custom))

      ;; whether to fontify certain ambiguous constructs by white space asymmetry
      (customize-set-variable 'c-asymmetry-fontification-flag nil)

      ;; align automatically inserted line continuation backslashes
      (customize-set-variable 'c-auto-align-backslashes t)

      ;; whether the indentation should be controlled by the syntactic context
      ;; if nil, every line is just indented to the same level as the previous one
      (customize-set-variable 'c-syntactic-indentation t)

      ;; amount of basic offset used by + and - symbols in `c-offsets-alist'
      ;; also used as the indentation step when `c-syntactic-indentation' is nil
      (customize-set-variable 'c-basic-offset 4) ; 'set-from-style

      ;; if non-nil, syntactic info is echoed when the line is indented
      (customize-set-variable 'c-echo-syntactic-information-p t)

      ;; specifies documentation comment style(s) to recognize
      (customize-set-variable 'c-doc-comment-style 'doxygen) ; 'set-from-style

      #+END_SRC

***** Hooks

      #+BEGIN_SRC emacs-lisp

      (add-hook 'c-mode-hook
                (lambda ()
                  ;; set dash docset
                  (vlm-activate-docset '"C")))

      (add-hook 'c++-mode-hook
                (lambda ()
                  ;; set dash docset
                  (vlm-activate-docset '"C++")))

      #+END_SRC

***** Binds

      #+BEGIN_SRC emacs-lisp

      (eval-after-load 'cc-mode
        (lambda ()
          (when (and (boundp 'c-mode-map) (boundp 'c++-mode-map))
            ;; complete or indent
            (define-key c-mode-map (kbd "TAB") 'ace-complete-at-point-or-indent)
            (define-key c++-mode-map (kbd "TAB") 'ace-complete-at-point-or-indent)
            ;; compilation keybind
            (define-key c-mode-map (kbd "C-c C-c")
                        (lambda ()
                          (interactive)
                          (funcall 'compile compile-command)))

            (define-key c++-mode-map (kbd "C-c C-c")
                        (lambda ()
                          (interactive)
                          (funcall 'compile compile-command))))))

      #+END_SRC

*** C#
**** Csharp-mode

     This is a major mode for editing C# files.
     It performs automatic indentation of C# syntax;
     font locking; and integration with imenu.el.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'csharp-mode nil t)

      #+END_SRC

*** Go
**** Go-mode

     The major mode for editing Go files.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'go-mode nil t)

      #+END_SRC

***** Hooks

      #+BEGIN_SRC emacs-lisp

      (add-hook 'go-mode-hook
                (lambda ()
                  ;; set dash docsets
                  (vlm-activate-docset '"Go")))

      #+END_SRC

***** Enable

      #+BEGIN_SRC emacs-lisp

      ;; add (*.go . go-mode) to auto-mode-alist
      ;; init go-mode when a file with the extersion .go is opened
      (add-hook 'window-setup-hook
                (lambda ()
                  (add-to-list 'auto-mode-alist '("\\.go\\'" . go-mode))))

      #+END_SRC

*** Sh
**** Sh-script

     Major mode for editing shell scripts. Bourne, C and rc shells as well
     as various derivatives are supported and easily derived from. Structured
     statements can be inserted with one command or abbrev. Completion is
     available for filenames, variables known from the script, the shell and
     the environment as well as commands.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'sh-script nil t)

      #+END_SRC

***** Hooks

      #+BEGIN_SRC emacs-lisp

      ;; (add-hook 'sh-mode-hook (lambda ()))

      #+END_SRC

**** Fish-mode

     Major mode for editing Fish shell files.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'fish-mode nil t)

      #+END_SRC

***** Hooks

      #+BEGIN_SRC emacs-lisp

      ;; (add-hook 'fish-mode-hook (lambda ()))

      #+END_SRC

*** Lua
**** Lua-mode

     Major mode for editing Lua files.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'lua-mode nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; non-nil means display lua-process-buffer after sending a command.
      (customize-set-variable 'lua-process-buffer t)

      ;; default application to run in Lua process
      (customize-set-variable 'lua-default-application "lua")

      ;; command switches for lua-default-application
      (customize-set-variable 'lua-default-command-switches "-i")

      ;; amount by which Lua subexpressions are indented
      (customize-set-variable 'lua-indent-level 4)

      ;; if non-nil, contents of multiline string will be indented
      (customize-set-variable 'lua-indent-string-contents t)

      ;; jump to innermost traceback location in *lua* buffer
      ;; when this variable is non-nil and a traceback occurs
      ;; when running Lua code in a process, jump immediately
      ;; to the source code of the innermost traceback location
      (customize-set-variable 'lua-jump-on-traceback t)

      #+END_SRC

***** Hooks

      #+BEGIN_SRC emacs-lisp

      (add-hook 'lua-mode-hook
                (lambda ()
                  ;; activate dash docset
                  (vlm-activate-docset "Lua")))

      #+END_SRC

***** Enable

      #+BEGIN_SRC emacs-lisp

      ;; add auto-mode
      (add-hook 'window-setup-hook
                (lambda ()
                  (add-to-list 'auto-mode-alist '("\\.lua$" . lua-mode))
                  (add-to-list 'interpreter-mode-alist '("lua" . lua-mode))))

      #+END_SRC

*** Tcl
**** Tcl

     Major mode for editing Tcl files.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'tcl nil t)

      #+END_SRC

*** Perl
**** Cperl-mode

     Major mode for editing Perl files.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'cperl-mode nil t)

      #+END_SRC

*** Python
**** Python

     Major mode for editing Python files with some fontification and
     indentation bits extracted from original Dave Love's python.el
     found in GNU/Emacs.

     Implements Syntax highlighting, Indentation, Movement, Shell
     interaction, Shell completion, Shell virtualenv support, Shell
     package support, Shell syntax highlighting, Pdb tracking, Symbol
     completion, Skeletons, FFAP, Code Check, Eldoc, Imenu.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'python nil t)

      #+END_SRC

***** Customize

      #+BEGIN_SRC emacs-lisp

      ;; default Python interpreter for shell
      (customize-set-variable 'python-shell-interpreter "python")

      ;; non-nil means template skeletons will be automagically inserted
      (customize-set-variable 'python-skeleton-autoinsert t)

      #+END_SRC

***** Hooks

      #+BEGIN_SRC emacs-lisp

      ;; enable modes
      (add-hook 'python-mode-hook
                (lambda()
                  ;; enable eldoc mode
                  (funcall 'eldoc-mode 1)))

      ;; set backends
      (add-hook 'python-mode-hook
                (lambda ()
                  ;; set dash docsets
                  (vlm-activate-docset '"Python 3")))

      #+END_SRC

*** Julia
**** Julia-mode

     Major mode for editing julia code. This is the official Emacs
     mode for editing Julia programs.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'julia-mode nil t)

      #+END_SRC

**** Ess-julia
***** Require

      Major mode for editing julia files.

      Customize inferior-julia-program to point to your julia binary
      and start the inferior interpreter with M-x julia.

      #+BEGIN_SRC emacs-lisp

      ;; (require 'ess-julia nil t)

      #+END_SRC

*** Vhdl
**** Vhdl-mode

     Major mode for editing VHDL files.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'vhdl-mode nil t)

      #+END_SRC

*** Verilog
**** Verilog

     A major mode for editing Verilog and SystemVerilog HDL source code (IEEE
     1364-2005 and IEEE 1800-2012 standards).

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'verilog nil t)

      #+END_SRC

*** Mql
**** Mql-mode

     Major mode for editing Mql files: work in progress!

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'mql-mode nil t)

      #+END_SRC


***** Customize

      #+BEGIN_SRC emacs-lisp


      #+END_SRC

***** Hooks

      #+BEGIN_SRC emacs-lisp

      (add-hook 'mql-mode-hook
                (lambda ()
                  ;; activate mql5 docset
                  (vlm-activate-docset '"mql5")))

      #+END_SRC

*** Web
**** Web-mode

     Web-mode is an emacs major mode for editing web templates aka
     HTML files embedding parts (CSS/JavaScript) and blocks
     (pre rendered by client/server side engines).

     Web-mode compatible with many template engines: PHP, JSP, ASP,
     Django, Twig, Jinja, Mustache, ERB, FreeMarker,
     Velocity, Cheetah, Smarty, CTemplate, Mustache, Blade, ErlyDTL,
     Go Template, Dust.js, Google Closure (soy), React/JSX,
     Angularjs, ejs, Nunjucks, etc.

***** Require

      #+BEGIN_SRC emacs-lisp

      ;; (require 'web-mode nil t)

      #+END_SRC

***** Enable

      #+BEGIN_SRC emacs-lisp

      ;; (add-hook 'window-setup-hook
      ;;           (lambda ()
      ;;             ;; add files extensions to web-mode
      ;;             (add-to-list 'auto-mode-alist '("\\.php\\'" . web-mode))
      ;;             (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
      ;;             (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
      ;;             (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
      ;;             (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
      ;;             (add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
      ;;             (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
      ;;             ;; resolve warning
      ;;             (when (boundp 'web-mode-engines-alist)
      ;;               (add-to-list 'web-mode-engines-alist '(("php" . "\\.phtml\\'"))))))

      #+END_SRC

** Unload

   #+BEGIN_SRC emacs-lisp

   ;; (defvar vlm-libraries-not-used
   ;;   '(cedet semantic chinese)
   ;;   "Libraries that are not used.")

   ;; (add-hook 'window-setup-hook
   ;;           (lambda ()
   ;;             (mapc (lambda (library)
   ;;                     (unload-feature library '(4)))
   ;;                   vlm-libraries-not-used)))

   #+END_SRC

** Cleanup

   A lot of commands are not used as often so they are cleanup
   (unbounded), it's preferable (IMHO) for quality of life
   a small set of keybinds and call/access this exotics commands
   with =execute-extended-command= know as =M-x= or even better
   the =minibuffer console=.

**** Esc

     Clean/unbind keys from esc-map.

     #+BEGIN_SRC emacs-lisp

     ;; clean esc map
     ;; (define-key esc-map (kbd "ESC") nil)
     (define-key esc-map (kbd "<f10>") nil)

     #+END_SRC

**** Ctl-x

     Clean/unbind keys from ctl-x-map.

     #+BEGIN_SRC emacs-lisp

     ;; unbind
     ;; (define-key ctl-x-map (kbd "C-SPC") nil)
     ;; (define-key ctl-x-map (kbd "C-=") nil)
     ;; (define-key ctl-x-map (kbd "C-0") nil)
     ;; (define-key ctl-x-map (kbd "C--") nil)
     ;; (define-key ctl-x-map (kbd "ESC") nil)
     ;; (define-key ctl-x-map (kbd ".") nil)
     ;; (define-key ctl-x-map (kbd "C-l") nil)
     ;; (define-key ctl-x-map (kbd "C-x") nil)
     ;; (define-key ctl-x-map (kbd "C-<left>") nil)
     ;; (define-key ctl-x-map (kbd "C-<right>") nil)
     ;; (define-key ctl-x-map (kbd "C-<up>") nil)
     ;; (define-key ctl-x-map (kbd "C-<down>") nil)
     (define-key ctl-x-map (kbd "<right>") nil)
     (define-key ctl-x-map (kbd "<left>") nil)

     ;; (define-key ctl-x-map (kbd "C-d") nil)
     ;; (define-key ctl-x-map (kbd "C-o") nil)
     ;; (define-key ctl-x-map (kbd "C-c") nil)
     (define-key ctl-x-map (kbd "C-j") nil)
     (define-key ctl-x-map (kbd "C-+") nil)
     (define-key ctl-x-map (kbd "C-a") nil)
     (define-key ctl-x-map (kbd "C-r") nil)
     (define-key ctl-x-map (kbd "C-n") nil)
     (define-key ctl-x-map (kbd "C-z") nil)
     (define-key ctl-x-map (kbd "C-p") nil)
     (define-key ctl-x-map (kbd "C-h") nil)
     ;; (define-key ctl-x-map (kbd "C-u") nil)
     (define-key ctl-x-map (kbd "C-\@") nil)
     (define-key ctl-x-map (kbd "M-:") nil)

     (define-key ctl-x-map (kbd "RET") nil)
     (define-key ctl-x-map (kbd "`") nil)
     (define-key ctl-x-map (kbd "]") nil)
     ;; (define-key ctl-x-map (kbd "[") nil)
     (define-key ctl-x-map (kbd ")") nil)
     (define-key ctl-x-map (kbd "(") nil)
     (define-key ctl-x-map (kbd "<") nil)
     (define-key ctl-x-map (kbd ">") nil)
     (define-key ctl-x-map (kbd "\@") nil)
     (define-key ctl-x-map (kbd "-") nil)
     (define-key ctl-x-map (kbd ";") nil)
     (define-key ctl-x-map (kbd "#") nil)
     (define-key ctl-x-map (kbd "*") nil)
     (define-key ctl-x-map (kbd "'") nil)
     (define-key ctl-x-map (kbd "$") nil)
     (define-key ctl-x-map (kbd "{") nil)
     (define-key ctl-x-map (kbd "}") nil)
     (define-key ctl-x-map (kbd "^") nil)
     ;; (define-key ctl-x-map (kbd "n") nil)
     ;; (define-key ctl-x-map (kbd "f") nil)
     ;; (define-key ctl-x-map (kbd "a") nil)
     ;; (define-key ctl-x-map (kbd "v") nil)
     (define-key ctl-x-map (kbd "h") nil)
     ;; (define-key ctl-x-map (kbd "d") nil)
     ;; (define-key ctl-x-map (kbd "x") nil)
     (define-key ctl-x-map (kbd "X") nil)
     ;; (define-key ctl-x-map (kbd "8") nil)

     #+END_SRC

**** Minor

     Clean minor-mode-map-alist.

     #+BEGIN_SRC emacs-lisp

     (add-hook 'window-setup-hook
               (lambda ()
                 (setq minor-mode-map-alist nil)))

     #+END_SRC

**** Global

     Clean/unbind keys from global-map.

     #+BEGIN_SRC emacs-lisp

     ;; unset
     (global-unset-key (kbd "C-z"))
     (global-unset-key (kbd "C-@"))
     (global-unset-key (kbd "C-\\"))
     (global-unset-key (kbd "C-_"))
     ;;(global-unset-key (kbd "M-l"))
     ;; (global-unset-key (kbd "M-h"))
     ;; (global-unset-key (kbd "M-\\"))
     (global-unset-key (kbd "M-$"))
     (global-unset-key (kbd "M-("))
     (global-unset-key (kbd "M-)"))
     ;; (global-unset-key (kbd "M-r"))
     (global-unset-key (kbd "M-{"))
     (global-unset-key (kbd "M-}"))
     (global-unset-key (kbd "S-SPC"))
     (global-unset-key (kbd "<backtap>"))
     (global-unset-key (kbd "M-="))
     (global-unset-key (kbd "M-@"))
     (global-unset-key (kbd "M-~"))

     ;; (global-unset-key (kbd "M-z"))
     ;; (global-unset-key (kbd "M-SPC"))
     ;; (global-unset-key (kbd "M-m"))
     ;; (global-unset-key (kbd "M-k"))
     ;; (global-unset-key (kbd "M-t"))
     ;; (global-unset-key (kbd "M-q"))

     (global-unset-key (kbd "C-M-h"))
     (global-unset-key (kbd "C-M-j"))
     (global-unset-key (kbd "C-M-."))
     (global-unset-key (kbd "C-M-l"))
     (global-unset-key (kbd "C-M-/"))
     ;; (global-unset-key (kbd "C-M-;"))
     (global-unset-key (kbd "C-M-@"))
     (global-unset-key (kbd "C-M-\\"))
     (global-unset-key (kbd "C-M-a"))
     (global-unset-key (kbd "C-M-r"))
     (global-unset-key (kbd "C-M-s"))
     (global-unset-key (kbd "C-M-%"))
     (global-unset-key (kbd "C-M-u"))
     (global-unset-key (kbd "C-M-d"))
     (global-unset-key (kbd "C-M-SPC"))
     (global-unset-key (kbd "C-M-S-v"))

     (global-unset-key (kbd "<C-M-end>"))
     (global-unset-key (kbd "<C-M-home>"))
     (global-unset-key (kbd "<C-S-backspace>"))
     (global-unset-key (kbd "<C-backspace>"))
     (global-unset-key (kbd "<C-delete>"))
     (global-unset-key (kbd "<C-down>"))
     (global-unset-key (kbd "<C-next>"))
     (global-unset-key (kbd "<C-end>"))
     (global-unset-key (kbd "<C-f10>"))
     (global-unset-key (kbd "<M-f10>"))

     (global-unset-key (kbd "<bottom-divider>"))
     (global-unset-key (kbd "<bottom-edge>"))
     (global-unset-key (kbd "<bottom-left-corner>"))
     (global-unset-key (kbd "<bottom-right-corner>"))

     (global-unset-key (kbd "<horizontal-scroll-bar>"))
     (global-unset-key (kbd "<vertical-scroll-bar>"))

     (global-unset-key (kbd "<left-edge>"))
     (global-unset-key (kbd "<right-edge>"))

     (global-unset-key (kbd "<undo>"))
     (global-unset-key (kbd "<find>"))
     (global-unset-key (kbd "<help>"))
     (global-unset-key (kbd "<open>"))
     (global-unset-key (kbd "<again>"))
     (global-unset-key (kbd "<menu>"))
     (global-unset-key (kbd "<header-line>"))
     (global-unset-key (kbd "<mode-line>"))

     (global-unset-key (kbd "<XF86Back>"))
     (global-unset-key (kbd "<XF86Forward>"))
     (global-unset-key (kbd "<XF86WakeUp>"))

     (global-unset-key (kbd "<top-edge>"))
     (global-unset-key (kbd "<top-left-corner>"))
     (global-unset-key (kbd "<top-right-corner>"))

     (global-unset-key (kbd "<mouse-1>"))
     (global-unset-key (kbd "<mouse-2>"))
     (global-unset-key (kbd "<mouse-3>"))
     (global-unset-key (kbd "<mouse-4>"))
     (global-unset-key (kbd "<mouse-5>"))
     (global-unset-key (kbd "<mouse-6>"))
     (global-unset-key (kbd "<mouse-7>"))

     (global-unset-key (kbd "<right-divider>"))
     (global-unset-key (kbd "<vertical-line>"))

     (global-unset-key (kbd "<f10>"))
     (global-unset-key (kbd "<f11>"))
     (global-unset-key (kbd "<f16>"))
     (global-unset-key (kbd "<f18>"))
     (global-unset-key (kbd "<f20>"))

     (global-unset-key (kbd "<drag-mouse-1>"))
     (global-unset-key (kbd "<C-mouse-4>"))
     (global-unset-key (kbd "<C-mouse-5>"))
     (global-unset-key (kbd "<C-mouse-6>"))
     (global-unset-key (kbd "<C-mouse-7>"))
     (global-unset-key (kbd "<M-mouse-1>"))
     (global-unset-key (kbd "<M-mouse-2>"))
     (global-unset-key (kbd "<M-mouse-3>"))
     (global-unset-key (kbd "<S-mouse-3>"))
     (global-unset-key (kbd "<S-mouse-4>"))
     (global-unset-key (kbd "<S-mouse-5>"))
     (global-unset-key (kbd "<S-mouse-6>"))
     (global-unset-key (kbd "<S-mouse-7>"))
     (global-unset-key (kbd "<C-down-mouse-1>"))
     (global-unset-key (kbd "<C-down-mouse-2>"))
     (global-unset-key (kbd "<M-down-mouse-1>"))
     (global-unset-key (kbd "<M-drag-mouse-1>"))
     (global-unset-key (kbd "<S-down-mouse-1>"))

     #+END_SRC

** EOF

   *...See You Space Cowboy...*


